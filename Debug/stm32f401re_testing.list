
stm32f401re_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007734  08007734  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800773c  0800773c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001984  200001e0  08007924  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b64  08007924  00021b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ff4  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f85  00000000  00000000  00034204  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00037190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  00037f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d14  00000000  00000000  00038b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd21  00000000  00000000  0005183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088041  00000000  00000000  0005f55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e759e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000e761c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007674 	.word	0x08007674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007674 	.word	0x08007674

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f94d 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f005 fdae 	bl	8006114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f965 	bl	80008b2 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f92d 	bl	800085e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000118 	.word	0x20000118
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000214 	.word	0x20000214

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000214 	.word	0x20000214

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff8e 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff29 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff3e 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff8e 	bl	800079c <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5d 	bl	8000748 <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff31 	bl	800070c <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d004      	beq.n	80008e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e00c      	b.n	8000902 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2205      	movs	r2, #5
 80008ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f022 0201 	bic.w	r2, r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	e159      	b.n	8000be0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	429a      	cmp	r2, r3
 8000946:	f040 8148 	bne.w	8000bda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d003      	beq.n	800095a <HAL_GPIO_Init+0x4a>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b12      	cmp	r3, #18
 8000958:	d123      	bne.n	80009a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4013      	ands	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	691a      	ldr	r2, [r3, #16]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3208      	adds	r2, #8
 800099c:	69b9      	ldr	r1, [r7, #24]
 800099e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4013      	ands	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0203 	and.w	r2, r3, #3
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d00b      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d007      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ea:	2b11      	cmp	r3, #17
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d130      	bne.n	8000a58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	091b      	lsrs	r3, r3, #4
 8000a42:	f003 0201 	and.w	r2, r3, #1
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 80a2 	beq.w	8000bda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <HAL_GPIO_Init+0x2e4>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a55      	ldr	r2, [pc, #340]	; (8000bf4 <HAL_GPIO_Init+0x2e4>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b53      	ldr	r3, [pc, #332]	; (8000bf4 <HAL_GPIO_Init+0x2e4>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ab2:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <HAL_GPIO_Init+0x2e8>)
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3302      	adds	r3, #2
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a48      	ldr	r2, [pc, #288]	; (8000bfc <HAL_GPIO_Init+0x2ec>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d019      	beq.n	8000b12 <HAL_GPIO_Init+0x202>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <HAL_GPIO_Init+0x2f0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0x1fe>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a46      	ldr	r2, [pc, #280]	; (8000c04 <HAL_GPIO_Init+0x2f4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00d      	beq.n	8000b0a <HAL_GPIO_Init+0x1fa>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <HAL_GPIO_Init+0x2f8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d007      	beq.n	8000b06 <HAL_GPIO_Init+0x1f6>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a44      	ldr	r2, [pc, #272]	; (8000c0c <HAL_GPIO_Init+0x2fc>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_GPIO_Init+0x1f2>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e008      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b02:	2307      	movs	r3, #7
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e004      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e002      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b12:	2300      	movs	r3, #0
 8000b14:	69fa      	ldr	r2, [r7, #28]
 8000b16:	f002 0203 	and.w	r2, r2, #3
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	4093      	lsls	r3, r2
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b24:	4934      	ldr	r1, [pc, #208]	; (8000bf8 <HAL_GPIO_Init+0x2e8>)
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b56:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b80:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000baa:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	f67f aea2 	bls.w	800092c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000be8:	bf00      	nop
 8000bea:	3724      	adds	r7, #36	; 0x24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40013800 	.word	0x40013800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40013c00 	.word	0x40013c00

08000c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
 8000c20:	4613      	mov	r3, r2
 8000c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c24:	787b      	ldrb	r3, [r7, #1]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c2a:	887a      	ldrh	r2, [r7, #2]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c30:	e003      	b.n	8000c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	041a      	lsls	r2, r3, #16
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	619a      	str	r2, [r3, #24]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c48:	b08f      	sub	sp, #60	; 0x3c
 8000c4a:	af0a      	add	r7, sp, #40	; 0x28
 8000c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e10f      	b.n	8000e78 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d106      	bne.n	8000c78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f005 fc70 	bl	8006558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fb39 	bl	800330e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	687e      	ldr	r6, [r7, #4]
 8000ca4:	466d      	mov	r5, sp
 8000ca6:	f106 0410 	add.w	r4, r6, #16
 8000caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cba:	1d33      	adds	r3, r6, #4
 8000cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cbe:	6838      	ldr	r0, [r7, #0]
 8000cc0:	f002 fa10 	bl	80030e4 <USB_CoreInit>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2202      	movs	r2, #2
 8000cce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e0d0      	b.n	8000e78 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fb27 	bl	8003330 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e04a      	b.n	8000d7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ce8:	7bfa      	ldrb	r2, [r7, #15]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	333d      	adds	r3, #61	; 0x3d
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	1a9b      	subs	r3, r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	333c      	adds	r3, #60	; 0x3c
 8000d0c:	7bfa      	ldrb	r2, [r7, #15]
 8000d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d10:	7bfa      	ldrb	r2, [r7, #15]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	b298      	uxth	r0, r3
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	1a9b      	subs	r3, r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	3342      	adds	r3, #66	; 0x42
 8000d24:	4602      	mov	r2, r0
 8000d26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	333f      	adds	r3, #63	; 0x3f
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	3344      	adds	r3, #68	; 0x44
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	3348      	adds	r3, #72	; 0x48
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	3350      	adds	r3, #80	; 0x50
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d3af      	bcc.n	8000ce8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e044      	b.n	8000e18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000db6:	7bfa      	ldrb	r2, [r7, #15]
 8000db8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dd0:	7bfa      	ldrb	r2, [r7, #15]
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000de6:	7bfa      	ldrb	r2, [r7, #15]
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3b5      	bcc.n	8000d8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	687e      	ldr	r6, [r7, #4]
 8000e2a:	466d      	mov	r5, sp
 8000e2c:	f106 0410 	add.w	r4, r6, #16
 8000e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e40:	1d33      	adds	r3, r6, #4
 8000e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f002 fa9d 	bl	8003384 <USB_DevInit>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d005      	beq.n	8000e5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e00d      	b.n	8000e78 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fa92 	bl	800439a <USB_DevDisconnect>

  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <HAL_PCD_Start+0x1c>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e020      	b.n	8000ede <HAL_PCD_Start+0x5e>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d109      	bne.n	8000ec0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fa50 	bl	800436a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fa0c 	bl	80032ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ee6:	b590      	push	{r4, r7, lr}
 8000ee8:	b08d      	sub	sp, #52	; 0x34
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 faf7 	bl	80044f0 <USB_GetMode>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 838e 	bne.w	8001626 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fa5b 	bl	80043ca <USB_ReadInterrupts>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8384 	beq.w	8001624 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 fa52 	bl	80043ca <USB_ReadInterrupts>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d107      	bne.n	8000f40 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f002 0202 	and.w	r2, r2, #2
 8000f3e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fa40 	bl	80043ca <USB_ReadInterrupts>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f54:	d17b      	bne.n	800104e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 fa46 	bl	80043f0 <USB_ReadDevAllOutEpInterrupt>
 8000f64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000f66:	e06f      	b.n	8001048 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d064      	beq.n	800103c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fa6b 	bl	8004458 <USB_ReadDevOutEPInterrupt>
 8000f82:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00c      	beq.n	8000fa8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	015a      	lsls	r2, r3, #5
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	4413      	add	r3, r2
 8000f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 fe0e 	bl	8001bc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00c      	beq.n	8000fcc <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 ff0d 	bl	8001dd4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	015a      	lsls	r2, r3, #5
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	2308      	movs	r3, #8
 8000fca:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d008      	beq.n	8000fe8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	015a      	lsls	r2, r3, #5
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d015      	beq.n	800101e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d108      	bne.n	800100c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001004:	461a      	mov	r2, r3
 8001006:	2101      	movs	r1, #1
 8001008:	f003 fab6 	bl	8004578 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	015a      	lsls	r2, r3, #5
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	4413      	add	r3, r2
 8001014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001018:	461a      	mov	r2, r3
 800101a:	2320      	movs	r3, #32
 800101c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d009      	beq.n	800103c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	015a      	lsls	r2, r3, #5
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	4413      	add	r3, r2
 8001030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001034:	461a      	mov	r2, r3
 8001036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	3301      	adds	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104a:	2b00      	cmp	r3, #0
 800104c:	d18c      	bne.n	8000f68 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f003 f9b9 	bl	80043ca <USB_ReadInterrupts>
 8001058:	4603      	mov	r3, r0
 800105a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001062:	f040 80c4 	bne.w	80011ee <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f003 f9da 	bl	8004424 <USB_ReadDevAllInEpInterrupt>
 8001070:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001076:	e0b6      	b.n	80011e6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80ab 	beq.w	80011da <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fa00 	bl	8004494 <USB_ReadDevInEPInterrupt>
 8001094:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	2201      	movs	r2, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69f9      	ldr	r1, [r7, #28]
 80010bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80010c0:	4013      	ands	r3, r2
 80010c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	015a      	lsls	r2, r3, #5
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	4413      	add	r3, r2
 80010cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d0:	461a      	mov	r2, r3
 80010d2:	2301      	movs	r3, #1
 80010d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d11b      	bne.n	8001116 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	3348      	adds	r3, #72	; 0x48
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4403      	add	r3, r0
 80010fe:	3344      	adds	r3, #68	; 0x44
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4419      	add	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4403      	add	r3, r0
 8001112:	3348      	adds	r3, #72	; 0x48
 8001114:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f005 faaa 	bl	8006676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d116      	bne.n	8001158 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	2b00      	cmp	r3, #0
 800112e:	d113      	bne.n	8001158 <HAL_PCD_IRQHandler+0x272>
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	3350      	adds	r3, #80	; 0x50
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d108      	bne.n	8001158 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001150:	461a      	mov	r2, r3
 8001152:	2101      	movs	r1, #1
 8001154:	f003 fa10 	bl	8004578 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	015a      	lsls	r2, r3, #5
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	4413      	add	r3, r2
 800116a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800116e:	461a      	mov	r2, r3
 8001170:	2308      	movs	r3, #8
 8001172:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	015a      	lsls	r2, r3, #5
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	4413      	add	r3, r2
 8001186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800118a:	461a      	mov	r2, r3
 800118c:	2310      	movs	r3, #16
 800118e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	015a      	lsls	r2, r3, #5
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	4413      	add	r3, r2
 80011a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011a6:	461a      	mov	r2, r3
 80011a8:	2340      	movs	r3, #64	; 0x40
 80011aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d008      	beq.n	80011c8 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	015a      	lsls	r2, r3, #5
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	4413      	add	r3, r2
 80011be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011c2:	461a      	mov	r2, r3
 80011c4:	2302      	movs	r3, #2
 80011c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80011d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fc67 	bl	8001aa8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	3301      	adds	r3, #1
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80011e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e2:	085b      	lsrs	r3, r3, #1
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f47f af45 	bne.w	8001078 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f8e9 	bl	80043ca <USB_ReadInterrupts>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001202:	d122      	bne.n	800124a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001212:	f023 0301 	bic.w	r3, r3, #1
 8001216:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800122a:	2100      	movs	r1, #0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 fe89 	bl	8001f44 <HAL_PCDEx_LPM_Callback>
 8001232:	e002      	b.n	800123a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f005 fa95 	bl	8006764 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f8bb 	bl	80043ca <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800125a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800125e:	d112      	bne.n	8001286 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	d102      	bne.n	8001276 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f005 fa51 	bl	8006718 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001284:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f003 f89d 	bl	80043ca <USB_ReadInterrupts>
 8001290:	4603      	mov	r3, r0
 8001292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129a:	f040 80a7 	bne.w	80013ec <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2110      	movs	r1, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f9d5 	bl	8003668 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c2:	e036      	b.n	8001332 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c6:	015a      	lsls	r2, r3, #5
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012d0:	461a      	mov	r2, r3
 80012d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012da:	015a      	lsls	r2, r3, #5
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	4413      	add	r3, r2
 80012e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e8:	0151      	lsls	r1, r2, #5
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	440a      	add	r2, r1
 80012ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	015a      	lsls	r2, r3, #5
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	4413      	add	r3, r2
 8001300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001304:	461a      	mov	r2, r3
 8001306:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800130a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	015a      	lsls	r2, r3, #5
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	4413      	add	r3, r2
 8001314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131c:	0151      	lsls	r1, r2, #5
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	440a      	add	r2, r1
 8001322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800132a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	3301      	adds	r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001338:	429a      	cmp	r2, r3
 800133a:	d3c3      	bcc.n	80012c4 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800134a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800134e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	2b00      	cmp	r3, #0
 8001356:	d016      	beq.n	8001386 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800135e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001368:	f043 030b 	orr.w	r3, r3, #11
 800136c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800137e:	f043 030b 	orr.w	r3, r3, #11
 8001382:	6453      	str	r3, [r2, #68]	; 0x44
 8001384:	e015      	b.n	80013b2 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001394:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001398:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800139c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ac:	f043 030b 	orr.w	r3, r3, #11
 80013b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013d6:	461a      	mov	r2, r3
 80013d8:	f003 f8ce 	bl	8004578 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 ffea 	bl	80043ca <USB_ReadInterrupts>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001400:	d124      	bne.n	800144c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f003 f880 	bl	800450c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f002 f98a 	bl	800372a <USB_GetDevSpeed>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681c      	ldr	r4, [r3, #0]
 8001422:	f001 f997 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8001426:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	4620      	mov	r0, r4
 8001432:	f001 feb9 	bl	80031a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f005 f945 	bl	80066c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800144a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f002 ffba 	bl	80043ca <USB_ReadInterrupts>
 8001456:	4603      	mov	r3, r0
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b10      	cmp	r3, #16
 800145e:	d161      	bne.n	8001524 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0210 	bic.w	r2, r2, #16
 800146e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f003 020f 	and.w	r2, r3, #15
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	3304      	adds	r3, #4
 800148e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	0c5b      	lsrs	r3, r3, #17
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	2b02      	cmp	r3, #2
 800149a:	d124      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d035      	beq.n	8001514 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	6a38      	ldr	r0, [r7, #32]
 80014bc:	f002 fe32 	bl	8004124 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014cc:	441a      	add	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	699a      	ldr	r2, [r3, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014de:	441a      	add	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	619a      	str	r2, [r3, #24]
 80014e4:	e016      	b.n	8001514 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	0c5b      	lsrs	r3, r3, #17
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d110      	bne.n	8001514 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014f8:	2208      	movs	r2, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	6a38      	ldr	r0, [r7, #32]
 80014fe:	f002 fe11 	bl	8004124 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800150e:	441a      	add	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0210 	orr.w	r2, r2, #16
 8001522:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f002 ff4e 	bl	80043ca <USB_ReadInterrupts>
 800152e:	4603      	mov	r3, r0
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b08      	cmp	r3, #8
 8001536:	d10a      	bne.n	800154e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f005 f8b6 	bl	80066aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f002 0208 	and.w	r2, r2, #8
 800154c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 ff39 	bl	80043ca <USB_ReadInterrupts>
 8001558:	4603      	mov	r3, r0
 800155a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001562:	d10f      	bne.n	8001584 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f005 f918 	bl	80067a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f002 ff1e 	bl	80043ca <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001598:	d10f      	bne.n	80015ba <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f005 f8eb 	bl	8006780 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80015b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 ff03 	bl	80043ca <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ce:	d10a      	bne.n	80015e6 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f005 f8f9 	bl	80067c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80015e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 feed 	bl	80043ca <USB_ReadInterrupts>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d115      	bne.n	8001626 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f005 f8e9 	bl	80067e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	e000      	b.n	8001626 <HAL_PCD_IRQHandler+0x740>
      return;
 8001624:	bf00      	nop
    }
  }
}
 8001626:	3734      	adds	r7, #52	; 0x34
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}

0800162c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_PCD_SetAddress+0x1a>
 8001642:	2302      	movs	r3, #2
 8001644:	e013      	b.n	800166e <HAL_PCD_SetAddress+0x42>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fe5d 	bl	800431e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	4608      	mov	r0, r1
 8001680:	4611      	mov	r1, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4603      	mov	r3, r0
 8001686:	70fb      	strb	r3, [r7, #3]
 8001688:	460b      	mov	r3, r1
 800168a:	803b      	strh	r3, [r7, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da0f      	bge.n	80016bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 020f 	and.w	r2, r3, #15
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	3338      	adds	r3, #56	; 0x38
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	3304      	adds	r3, #4
 80016b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	705a      	strb	r2, [r3, #1]
 80016ba:	e00f      	b.n	80016dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	f003 020f 	and.w	r2, r3, #15
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	1a9b      	subs	r3, r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	3304      	adds	r3, #4
 80016d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016e8:	883a      	ldrh	r2, [r7, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	78ba      	ldrb	r2, [r7, #2]
 80016f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001706:	78bb      	ldrb	r3, [r7, #2]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d102      	bne.n	8001712 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_PCD_EP_Open+0xaa>
 800171c:	2302      	movs	r3, #2
 800171e:	e00e      	b.n	800173e <HAL_PCD_EP_Open+0xc8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	4618      	mov	r0, r3
 8001730:	f002 f820 	bl	8003774 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800173c:	7afb      	ldrb	r3, [r7, #11]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001756:	2b00      	cmp	r3, #0
 8001758:	da0f      	bge.n	800177a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	f003 020f 	and.w	r2, r3, #15
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	3338      	adds	r3, #56	; 0x38
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	3304      	adds	r3, #4
 8001770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2201      	movs	r2, #1
 8001776:	705a      	strb	r2, [r3, #1]
 8001778:	e00f      	b.n	800179a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	f003 020f 	and.w	r2, r3, #15
 8001780:	4613      	mov	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	3304      	adds	r3, #4
 8001792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_PCD_EP_Close+0x6e>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e00e      	b.n	80017d2 <HAL_PCD_EP_Close+0x8c>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 f85e 	bl	8003884 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	460b      	mov	r3, r1
 80017e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	f003 020f 	and.w	r2, r3, #15
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	3304      	adds	r3, #4
 8001802:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2200      	movs	r2, #0
 800181a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800181c:	7afb      	ldrb	r3, [r7, #11]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	b2da      	uxtb	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d102      	bne.n	8001836 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001836:	7afb      	ldrb	r3, [r7, #11]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	2b00      	cmp	r3, #0
 800183e:	d109      	bne.n	8001854 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	6979      	ldr	r1, [r7, #20]
 800184e:	f002 fae1 	bl	8003e14 <USB_EP0StartXfer>
 8001852:	e008      	b.n	8001866 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	6979      	ldr	r1, [r7, #20]
 8001862:	f002 f893 	bl	800398c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	460b      	mov	r3, r1
 80018ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b0:	7afb      	ldrb	r3, [r7, #11]
 80018b2:	f003 020f 	and.w	r2, r3, #15
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	3338      	adds	r3, #56	; 0x38
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	3304      	adds	r3, #4
 80018c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2201      	movs	r2, #1
 80018de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d102      	bne.n	80018fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	6979      	ldr	r1, [r7, #20]
 8001912:	f002 fa7f 	bl	8003e14 <USB_EP0StartXfer>
 8001916:	e008      	b.n	800192a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	6979      	ldr	r1, [r7, #20]
 8001926:	f002 f831 	bl	800398c <USB_EPStartXfer>
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	f003 020f 	and.w	r2, r3, #15
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d901      	bls.n	8001952 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e050      	b.n	80019f4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001956:	2b00      	cmp	r3, #0
 8001958:	da0f      	bge.n	800197a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 020f 	and.w	r2, r3, #15
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	3338      	adds	r3, #56	; 0x38
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	3304      	adds	r3, #4
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	705a      	strb	r2, [r3, #1]
 8001978:	e00d      	b.n	8001996 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	3304      	adds	r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_PCD_EP_SetStall+0x82>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e01e      	b.n	80019f4 <HAL_PCD_EP_SetStall+0xc0>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68f9      	ldr	r1, [r7, #12]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fbd6 	bl	8004176 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10a      	bne.n	80019ea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	b2d9      	uxtb	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80019e4:	461a      	mov	r2, r3
 80019e6:	f002 fdc7 	bl	8004578 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 020f 	and.w	r2, r3, #15
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d901      	bls.n	8001a1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e042      	b.n	8001aa0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da0f      	bge.n	8001a42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	f003 020f 	and.w	r2, r3, #15
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	3338      	adds	r3, #56	; 0x38
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	3304      	adds	r3, #4
 8001a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	705a      	strb	r2, [r3, #1]
 8001a40:	e00f      	b.n	8001a62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	f003 020f 	and.w	r2, r3, #15
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_PCD_EP_ClrStall+0x86>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e00e      	b.n	8001aa0 <HAL_PCD_EP_ClrStall+0xa4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68f9      	ldr	r1, [r7, #12]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fbde 	bl	8004252 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	3338      	adds	r3, #56	; 0x38
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d901      	bls.n	8001ae0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e06c      	b.n	8001bba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d902      	bls.n	8001afc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	3303      	adds	r3, #3
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b04:	e02b      	b.n	8001b5e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d902      	bls.n	8001b22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3303      	adds	r3, #3
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	68d9      	ldr	r1, [r3, #12]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6978      	ldr	r0, [r7, #20]
 8001b42:	f002 faba 	bl	80040ba <USB_WritePacket>

    ep->xfer_buff  += len;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	441a      	add	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	441a      	add	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d809      	bhi.n	8001b88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d203      	bcs.n	8001b88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1be      	bne.n	8001b06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d811      	bhi.n	8001bb8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	6939      	ldr	r1, [r7, #16]
 8001bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	333c      	adds	r3, #60	; 0x3c
 8001bdc:	3304      	adds	r3, #4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	f040 80b3 	bne.w	8001d62 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d028      	beq.n	8001c58 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4a70      	ldr	r2, [pc, #448]	; (8001dcc <PCD_EP_OutXfrComplete_int+0x208>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d90e      	bls.n	8001c2c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c24:	461a      	mov	r2, r3
 8001c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f004 fcf5 	bl	800661c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2101      	movs	r1, #1
 8001c40:	f002 fc9a 	bl	8004578 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c50:	461a      	mov	r2, r3
 8001c52:	2308      	movs	r3, #8
 8001c54:	6093      	str	r3, [r2, #8]
 8001c56:	e0b3      	b.n	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2320      	movs	r3, #32
 8001c72:	6093      	str	r3, [r2, #8]
 8001c74:	e0a4      	b.n	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 809f 	bne.w	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <PCD_EP_OutXfrComplete_int+0x208>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d90f      	bls.n	8001caa <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca6:	6093      	str	r3, [r2, #8]
 8001ca8:	e08a      	b.n	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cbc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	0159      	lsls	r1, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001cd0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4403      	add	r3, r0
 8001ce0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ce4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cf8:	6819      	ldr	r1, [r3, #0]
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4403      	add	r3, r0
 8001d08:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4419      	add	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4403      	add	r3, r0
 8001d1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d22:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f004 fc88 	bl	8006640 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d144      	bne.n	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d138      	bne.n	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	f002 fc0c 	bl	8004578 <USB_EP0_OutStart>
 8001d60:	e02e      	b.n	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d124      	bne.n	8001db4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d80:	461a      	mov	r2, r3
 8001d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d86:	6093      	str	r3, [r2, #8]
 8001d88:	e01a      	b.n	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da0:	461a      	mov	r2, r3
 8001da2:	2320      	movs	r3, #32
 8001da4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f004 fc47 	bl	8006640 <HAL_PCD_DataOutStageCallback>
 8001db2:	e005      	b.n	8001dc0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f004 fc40 	bl	8006640 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	4f54300a 	.word	0x4f54300a
 8001dd0:	4f54310a 	.word	0x4f54310a

08001dd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	333c      	adds	r3, #60	; 0x3c
 8001dec:	3304      	adds	r3, #4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d113      	bne.n	8001e32 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <PCD_EP_OutSetupPacket_int+0xb8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d922      	bls.n	8001e58 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01d      	beq.n	8001e58 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2e:	6093      	str	r3, [r2, #8]
 8001e30:	e012      	b.n	8001e58 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <PCD_EP_OutSetupPacket_int+0xbc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10e      	bne.n	8001e58 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e50:	461a      	mov	r2, r3
 8001e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f004 fbdf 	bl	800661c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <PCD_EP_OutSetupPacket_int+0xb8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d90c      	bls.n	8001e80 <PCD_EP_OutSetupPacket_int+0xac>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	f002 fb7c 	bl	8004578 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	4f54300a 	.word	0x4f54300a
 8001e90:	4f54310a 	.word	0x4f54310a

08001e94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d107      	bne.n	8001ec2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001eb2:	883b      	ldrh	r3, [r7, #0]
 8001eb4:	0419      	lsls	r1, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8001ec0:	e028      	b.n	8001f14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e00d      	b.n	8001ef2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	3340      	adds	r3, #64	; 0x40
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d3ec      	bcc.n	8001ed6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001efc:	883b      	ldrh	r3, [r7, #0]
 8001efe:	0418      	lsls	r0, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	4302      	orrs	r2, r0
 8001f0c:	3340      	adds	r3, #64	; 0x40
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e22d      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d075      	beq.n	8002066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7a:	4ba3      	ldr	r3, [pc, #652]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d00c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f86:	4ba0      	ldr	r3, [pc, #640]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d112      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f92:	4b9d      	ldr	r3, [pc, #628]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	4b99      	ldr	r3, [pc, #612]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d05b      	beq.n	8002064 <HAL_RCC_OscConfig+0x108>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d157      	bne.n	8002064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e208      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x74>
 8001fc2:	4b91      	ldr	r3, [pc, #580]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a90      	ldr	r2, [pc, #576]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0xb0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a8a      	ldr	r2, [pc, #552]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b88      	ldr	r3, [pc, #544]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xb0>
 8001ff4:	4b84      	ldr	r3, [pc, #528]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a83      	ldr	r2, [pc, #524]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a80      	ldr	r2, [pc, #512]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe fb1a 	bl	800064c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201c:	f7fe fb16 	bl	800064c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1cd      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b76      	ldr	r3, [pc, #472]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0xc0>
 800203a:	e014      	b.n	8002066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe fb06 	bl	800064c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002044:	f7fe fb02 	bl	800064c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1b9      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	4b6c      	ldr	r3, [pc, #432]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0xe8>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d063      	beq.n	800213a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002072:	4b65      	ldr	r3, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207e:	4b62      	ldr	r3, [pc, #392]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002086:	2b08      	cmp	r3, #8
 8002088:	d11c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x152>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e18d      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4952      	ldr	r1, [pc, #328]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	e03a      	b.n	800213a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020cc:	4b4f      	ldr	r3, [pc, #316]	; (800220c <HAL_RCC_OscConfig+0x2b0>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7fe fabb 	bl	800064c <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020da:	f7fe fab7 	bl	800064c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e16e      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4940      	ldr	r1, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210e:	4b3f      	ldr	r3, [pc, #252]	; (800220c <HAL_RCC_OscConfig+0x2b0>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe fa9a 	bl	800064c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211c:	f7fe fa96 	bl	800064c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e14d      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d030      	beq.n	80021a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d016      	beq.n	800217c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_RCC_OscConfig+0x2b4>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe fa7a 	bl	800064c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215c:	f7fe fa76 	bl	800064c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e12d      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x200>
 800217a:	e015      	b.n	80021a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_OscConfig+0x2b4>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7fe fa63 	bl	800064c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218a:	f7fe fa5f 	bl	800064c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e116      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80a0 	beq.w	80022f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_OscConfig+0x2b8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCC_OscConfig+0x2b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_RCC_OscConfig+0x2b8>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7fe fa25 	bl	800064c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e011      	b.n	800222a <HAL_RCC_OscConfig+0x2ce>
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	42470000 	.word	0x42470000
 8002210:	42470e80 	.word	0x42470e80
 8002214:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002218:	f7fe fa18 	bl	800064c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e0cf      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_OscConfig+0x478>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x2f0>
 800223e:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a65      	ldr	r2, [pc, #404]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x32a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x312>
 8002254:	4b60      	ldr	r3, [pc, #384]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a5f      	ldr	r2, [pc, #380]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a5c      	ldr	r2, [pc, #368]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x32a>
 800226e:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a59      	ldr	r2, [pc, #356]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	4b57      	ldr	r3, [pc, #348]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a56      	ldr	r2, [pc, #344]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228e:	f7fe f9dd 	bl	800064c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe f9d9 	bl	800064c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e08e      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ee      	beq.n	8002296 <HAL_RCC_OscConfig+0x33a>
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7fe f9c7 	bl	800064c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe f9c3 	bl	800064c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e078      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d064      	beq.n	80023c8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d05c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d141      	bne.n	8002396 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_RCC_OscConfig+0x480>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe f998 	bl	800064c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe f994 	bl	800064c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e04b      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	3b01      	subs	r3, #1
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	491d      	ldr	r1, [pc, #116]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_RCC_OscConfig+0x480>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe f96d 	bl	800064c <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe f969 	bl	800064c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e020      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x41a>
 8002394:	e018      	b.n	80023c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_RCC_OscConfig+0x480>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe f956 	bl	800064c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe f952 	bl	800064c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e009      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_RCC_OscConfig+0x47c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x448>
 80023c2:	e001      	b.n	80023c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40007000 	.word	0x40007000
 80023d8:	40023800 	.word	0x40023800
 80023dc:	42470060 	.word	0x42470060

080023e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0ca      	b.n	800258a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f4:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d90c      	bls.n	800241c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b64      	ldr	r3, [pc, #400]	; (8002594 <HAL_RCC_ClockConfig+0x1b4>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_RCC_ClockConfig+0x1b4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0b6      	b.n	800258a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002434:	4b58      	ldr	r3, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800243e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800244c:	4b52      	ldr	r3, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a51      	ldr	r2, [pc, #324]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002458:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	494c      	ldr	r1, [pc, #304]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d044      	beq.n	8002500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d119      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e07d      	b.n	800258a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d003      	beq.n	800249e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249a:	2b03      	cmp	r3, #3
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06d      	b.n	800258a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e065      	b.n	800258a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4933      	ldr	r1, [pc, #204]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe f8bc 	bl	800064c <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe f8b8 	bl	800064c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e04d      	b.n	800258a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_ClockConfig+0x1b4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d20c      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_RCC_ClockConfig+0x1b4>)
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <HAL_RCC_ClockConfig+0x1b4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e030      	b.n	800258a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002534:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4915      	ldr	r1, [pc, #84]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	490d      	ldr	r1, [pc, #52]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002566:	f000 f81d 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800256a:	4601      	mov	r1, r0
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	5cd3      	ldrb	r3, [r2, r3]
 800257a:	fa21 f303 	lsr.w	r3, r1, r3
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe f81e 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	080076e8 	.word	0x080076e8
 80025a0:	20000118 	.word	0x20000118

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d007      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x32>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d008      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x38>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80b4 	bne.w	8002738 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025d2:	60bb      	str	r3, [r7, #8]
       break;
 80025d4:	e0b3      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025d6:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025d8:	60bb      	str	r3, [r7, #8]
      break;
 80025da:	e0b0      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025dc:	4b5a      	ldr	r3, [pc, #360]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025e6:	4b58      	ldr	r3, [pc, #352]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d04a      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f2:	4b55      	ldr	r3, [pc, #340]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	ea03 0501 	and.w	r5, r3, r1
 8002608:	ea04 0602 	and.w	r6, r4, r2
 800260c:	4629      	mov	r1, r5
 800260e:	4632      	mov	r2, r6
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f04f 0400 	mov.w	r4, #0
 8002618:	0154      	lsls	r4, r2, #5
 800261a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800261e:	014b      	lsls	r3, r1, #5
 8002620:	4619      	mov	r1, r3
 8002622:	4622      	mov	r2, r4
 8002624:	1b49      	subs	r1, r1, r5
 8002626:	eb62 0206 	sbc.w	r2, r2, r6
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	f04f 0400 	mov.w	r4, #0
 8002632:	0194      	lsls	r4, r2, #6
 8002634:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002638:	018b      	lsls	r3, r1, #6
 800263a:	1a5b      	subs	r3, r3, r1
 800263c:	eb64 0402 	sbc.w	r4, r4, r2
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	00e2      	lsls	r2, r4, #3
 800264a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800264e:	00d9      	lsls	r1, r3, #3
 8002650:	460b      	mov	r3, r1
 8002652:	4614      	mov	r4, r2
 8002654:	195b      	adds	r3, r3, r5
 8002656:	eb44 0406 	adc.w	r4, r4, r6
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	0262      	lsls	r2, r4, #9
 8002664:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002668:	0259      	lsls	r1, r3, #9
 800266a:	460b      	mov	r3, r1
 800266c:	4614      	mov	r4, r2
 800266e:	4618      	mov	r0, r3
 8002670:	4621      	mov	r1, r4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f04f 0400 	mov.w	r4, #0
 8002678:	461a      	mov	r2, r3
 800267a:	4623      	mov	r3, r4
 800267c:	f7fd fe00 	bl	8000280 <__aeabi_uldivmod>
 8002680:	4603      	mov	r3, r0
 8002682:	460c      	mov	r4, r1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e049      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	f04f 0400 	mov.w	r4, #0
 8002692:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	ea03 0501 	and.w	r5, r3, r1
 800269e:	ea04 0602 	and.w	r6, r4, r2
 80026a2:	4629      	mov	r1, r5
 80026a4:	4632      	mov	r2, r6
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	f04f 0400 	mov.w	r4, #0
 80026ae:	0154      	lsls	r4, r2, #5
 80026b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026b4:	014b      	lsls	r3, r1, #5
 80026b6:	4619      	mov	r1, r3
 80026b8:	4622      	mov	r2, r4
 80026ba:	1b49      	subs	r1, r1, r5
 80026bc:	eb62 0206 	sbc.w	r2, r2, r6
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	f04f 0400 	mov.w	r4, #0
 80026c8:	0194      	lsls	r4, r2, #6
 80026ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026ce:	018b      	lsls	r3, r1, #6
 80026d0:	1a5b      	subs	r3, r3, r1
 80026d2:	eb64 0402 	sbc.w	r4, r4, r2
 80026d6:	f04f 0100 	mov.w	r1, #0
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	00e2      	lsls	r2, r4, #3
 80026e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026e4:	00d9      	lsls	r1, r3, #3
 80026e6:	460b      	mov	r3, r1
 80026e8:	4614      	mov	r4, r2
 80026ea:	195b      	adds	r3, r3, r5
 80026ec:	eb44 0406 	adc.w	r4, r4, r6
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	02a2      	lsls	r2, r4, #10
 80026fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026fe:	0299      	lsls	r1, r3, #10
 8002700:	460b      	mov	r3, r1
 8002702:	4614      	mov	r4, r2
 8002704:	4618      	mov	r0, r3
 8002706:	4621      	mov	r1, r4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	461a      	mov	r2, r3
 8002710:	4623      	mov	r3, r4
 8002712:	f7fd fdb5 	bl	8000280 <__aeabi_uldivmod>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	60bb      	str	r3, [r7, #8]
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800273a:	60bb      	str	r3, [r7, #8]
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	68bb      	ldr	r3, [r7, #8]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200

08002754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_RCC_GetHCLKFreq+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000118 	.word	0x20000118

0800276c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002770:	f7ff fff0 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002774:	4601      	mov	r1, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0a9b      	lsrs	r3, r3, #10
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	080076f8 	.word	0x080076f8

08002794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002798:	f7ff ffdc 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 800279c:	4601      	mov	r1, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0b5b      	lsrs	r3, r3, #13
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	080076f8 	.word	0x080076f8

080027bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e03f      	b.n	800284e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f003 fcbe 	bl	8006164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	; 0x24
 80027ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fa65 	bl	8002cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_UART_IRQHandler+0x52>
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f992 	bl	8002bcc <UART_Receive_IT>
      return;
 80028a8:	e0cc      	b.n	8002a44 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80ab 	beq.w	8002a08 <HAL_UART_IRQHandler+0x1b0>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_UART_IRQHandler+0x70>
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80a0 	beq.w	8002a08 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_UART_IRQHandler+0x90>
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_UART_IRQHandler+0xb0>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	f043 0202 	orr.w	r2, r3, #2
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_UART_IRQHandler+0xd0>
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	f043 0204 	orr.w	r2, r3, #4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_UART_IRQHandler+0xf0>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	f043 0208 	orr.w	r2, r3, #8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d078      	beq.n	8002a42 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_UART_IRQHandler+0x112>
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f931 	bl	8002bcc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <HAL_UART_IRQHandler+0x13a>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d031      	beq.n	80029f6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f87a 	bl	8002a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d123      	bne.n	80029ee <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d013      	beq.n	80029e6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_UART_IRQHandler+0x1f4>)
 80029c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd ff7d 	bl	80008ca <HAL_DMA_Abort_IT>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e0:	4610      	mov	r0, r2
 80029e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e4:	e00e      	b.n	8002a04 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f846 	bl	8002a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	e00a      	b.n	8002a04 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f842 	bl	8002a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	e006      	b.n	8002a04 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f83e 	bl	8002a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a02:	e01e      	b.n	8002a42 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	bf00      	nop
    return;
 8002a06:	e01c      	b.n	8002a42 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_UART_IRQHandler+0x1cc>
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f867 	bl	8002af0 <UART_Transmit_IT>
    return;
 8002a22:	e00f      	b.n	8002a44 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_UART_IRQHandler+0x1ec>
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f8af 	bl	8002b9c <UART_EndTransmit_IT>
    return;
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002a42:	bf00      	nop
  }
}
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	08002ac9 	.word	0x08002ac9

08002a50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002aa2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff ffc8 	bl	8002a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b21      	cmp	r3, #33	; 0x21
 8002b02:	d144      	bne.n	8002b8e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0c:	d11a      	bne.n	8002b44 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b22:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	1c9a      	adds	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	621a      	str	r2, [r3, #32]
 8002b36:	e00e      	b.n	8002b56 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]
 8002b42:	e008      	b.n	8002b56 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	1c59      	adds	r1, r3, #1
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6211      	str	r1, [r2, #32]
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4619      	mov	r1, r3
 8002b64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff47 	bl	8002a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b22      	cmp	r3, #34	; 0x22
 8002bde:	d171      	bne.n	8002cc4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be8:	d123      	bne.n	8002c32 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10e      	bne.n	8002c16 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e029      	b.n	8002c6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c30:	e01b      	b.n	8002c6a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6858      	ldr	r0, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	1c59      	adds	r1, r3, #1
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6291      	str	r1, [r2, #40]	; 0x28
 8002c4a:	b2c2      	uxtb	r2, r0
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e00c      	b.n	8002c6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	1c58      	adds	r0, r3, #1
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	6288      	str	r0, [r1, #40]	; 0x28
 8002c62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4619      	mov	r1, r3
 8002c78:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d120      	bne.n	8002cc0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0220 	bic.w	r2, r2, #32
 8002c8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff fed4 	bl	8002a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e002      	b.n	8002cc6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d10:	f023 030c 	bic.w	r3, r3, #12
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699a      	ldr	r2, [r3, #24]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d3c:	f040 80e4 	bne.w	8002f08 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4aab      	ldr	r2, [pc, #684]	; (8002ff4 <UART_SetConfig+0x324>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <UART_SetConfig+0x84>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4aaa      	ldr	r2, [pc, #680]	; (8002ff8 <UART_SetConfig+0x328>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d16c      	bne.n	8002e2e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d54:	f7ff fd1e 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	009a      	lsls	r2, r3, #2
 8002d62:	441a      	add	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	4aa3      	ldr	r2, [pc, #652]	; (8002ffc <UART_SetConfig+0x32c>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	011c      	lsls	r4, r3, #4
 8002d78:	f7ff fd0c 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	009a      	lsls	r2, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d92:	f7ff fcff 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009a      	lsls	r2, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	4a93      	ldr	r2, [pc, #588]	; (8002ffc <UART_SetConfig+0x32c>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2264      	movs	r2, #100	; 0x64
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	1aeb      	subs	r3, r5, r3
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	3332      	adds	r3, #50	; 0x32
 8002dc0:	4a8e      	ldr	r2, [pc, #568]	; (8002ffc <UART_SetConfig+0x32c>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dce:	441c      	add	r4, r3
 8002dd0:	f7ff fce0 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	009a      	lsls	r2, r3, #2
 8002dde:	441a      	add	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dea:	f7ff fcd3 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009a      	lsls	r2, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	4a7d      	ldr	r2, [pc, #500]	; (8002ffc <UART_SetConfig+0x32c>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2264      	movs	r2, #100	; 0x64
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	1aeb      	subs	r3, r5, r3
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	3332      	adds	r3, #50	; 0x32
 8002e18:	4a78      	ldr	r2, [pc, #480]	; (8002ffc <UART_SetConfig+0x32c>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 0207 	and.w	r2, r3, #7
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4422      	add	r2, r4
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e154      	b.n	80030d8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e2e:	f7ff fc9d 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009a      	lsls	r2, r3, #2
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	4a6c      	ldr	r2, [pc, #432]	; (8002ffc <UART_SetConfig+0x32c>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	011c      	lsls	r4, r3, #4
 8002e52:	f7ff fc8b 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009a      	lsls	r2, r3, #2
 8002e60:	441a      	add	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e6c:	f7ff fc7e 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009a      	lsls	r2, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	4a5d      	ldr	r2, [pc, #372]	; (8002ffc <UART_SetConfig+0x32c>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	2264      	movs	r2, #100	; 0x64
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
 8002e94:	1aeb      	subs	r3, r5, r3
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	3332      	adds	r3, #50	; 0x32
 8002e9a:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <UART_SetConfig+0x32c>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ea8:	441c      	add	r4, r3
 8002eaa:	f7ff fc5f 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ec4:	f7ff fc52 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009a      	lsls	r2, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	4a47      	ldr	r2, [pc, #284]	; (8002ffc <UART_SetConfig+0x32c>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	2264      	movs	r2, #100	; 0x64
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	1aeb      	subs	r3, r5, r3
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	3332      	adds	r3, #50	; 0x32
 8002ef2:	4a42      	ldr	r2, [pc, #264]	; (8002ffc <UART_SetConfig+0x32c>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	f003 0207 	and.w	r2, r3, #7
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4422      	add	r2, r4
 8002f04:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002f06:	e0e7      	b.n	80030d8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a39      	ldr	r2, [pc, #228]	; (8002ff4 <UART_SetConfig+0x324>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <UART_SetConfig+0x24c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a38      	ldr	r2, [pc, #224]	; (8002ff8 <UART_SetConfig+0x328>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d171      	bne.n	8003000 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f1c:	f7ff fc3a 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	009a      	lsls	r2, r3, #2
 8002f2a:	441a      	add	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <UART_SetConfig+0x32c>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	011c      	lsls	r4, r3, #4
 8002f40:	f7ff fc28 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009a      	lsls	r2, r3, #2
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f5a:	f7ff fc1b 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009a      	lsls	r2, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <UART_SetConfig+0x32c>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2264      	movs	r2, #100	; 0x64
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	1aeb      	subs	r3, r5, r3
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	3332      	adds	r3, #50	; 0x32
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <UART_SetConfig+0x32c>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f94:	441c      	add	r4, r3
 8002f96:	f7ff fbfd 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fb0:	f7ff fbf0 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	009a      	lsls	r2, r3, #2
 8002fbe:	441a      	add	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <UART_SetConfig+0x32c>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	2264      	movs	r2, #100	; 0x64
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	1aeb      	subs	r3, r5, r3
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	3332      	adds	r3, #50	; 0x32
 8002fde:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <UART_SetConfig+0x32c>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	f003 020f 	and.w	r2, r3, #15
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4422      	add	r2, r4
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	e071      	b.n	80030d8 <UART_SetConfig+0x408>
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	40011400 	.word	0x40011400
 8002ffc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003000:	f7ff fbb4 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003004:	4602      	mov	r2, r0
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	009a      	lsls	r2, r3, #2
 800300e:	441a      	add	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	4a31      	ldr	r2, [pc, #196]	; (80030e0 <UART_SetConfig+0x410>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	011c      	lsls	r4, r3, #4
 8003024:	f7ff fba2 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003028:	4602      	mov	r2, r0
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009a      	lsls	r2, r3, #2
 8003032:	441a      	add	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	fbb2 f5f3 	udiv	r5, r2, r3
 800303e:	f7ff fb95 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003042:	4602      	mov	r2, r0
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009a      	lsls	r2, r3, #2
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	4a21      	ldr	r2, [pc, #132]	; (80030e0 <UART_SetConfig+0x410>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2264      	movs	r2, #100	; 0x64
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	1aeb      	subs	r3, r5, r3
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	3332      	adds	r3, #50	; 0x32
 800306c:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <UART_SetConfig+0x410>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003078:	441c      	add	r4, r3
 800307a:	f7ff fb77 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 800307e:	4602      	mov	r2, r0
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fbb2 f5f3 	udiv	r5, r2, r3
 8003094:	f7ff fb6a 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003098:	4602      	mov	r2, r0
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009a      	lsls	r2, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	4a0c      	ldr	r2, [pc, #48]	; (80030e0 <UART_SetConfig+0x410>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	2264      	movs	r2, #100	; 0x64
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	1aeb      	subs	r3, r5, r3
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	3332      	adds	r3, #50	; 0x32
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <UART_SetConfig+0x410>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 020f 	and.w	r2, r3, #15
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4422      	add	r2, r4
 80030d4:	609a      	str	r2, [r3, #8]
}
 80030d6:	e7ff      	b.n	80030d8 <UART_SetConfig+0x408>
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bdb0      	pop	{r4, r5, r7, pc}
 80030e0:	51eb851f 	.word	0x51eb851f

080030e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030e4:	b084      	sub	sp, #16
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	f107 001c 	add.w	r0, r7, #28
 80030f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d122      	bne.n	8003142 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	2b01      	cmp	r3, #1
 8003128:	d105      	bne.n	8003136 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f001 fa7c 	bl	8004634 <USB_CoreReset>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	e01a      	b.n	8003178 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f001 fa70 	bl	8004634 <USB_CoreReset>
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
 800316a:	e005      	b.n	8003178 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	2b01      	cmp	r3, #1
 800317c:	d10b      	bne.n	8003196 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f043 0206 	orr.w	r2, r3, #6
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031a2:	b004      	add	sp, #16
 80031a4:	4770      	bx	lr
	...

080031a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d165      	bne.n	8003288 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4a41      	ldr	r2, [pc, #260]	; (80032c4 <USB_SetTurnaroundTime+0x11c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d906      	bls.n	80031d2 <USB_SetTurnaroundTime+0x2a>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4a40      	ldr	r2, [pc, #256]	; (80032c8 <USB_SetTurnaroundTime+0x120>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d802      	bhi.n	80031d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80031cc:	230f      	movs	r3, #15
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e062      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4a3c      	ldr	r2, [pc, #240]	; (80032c8 <USB_SetTurnaroundTime+0x120>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d906      	bls.n	80031e8 <USB_SetTurnaroundTime+0x40>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4a3b      	ldr	r2, [pc, #236]	; (80032cc <USB_SetTurnaroundTime+0x124>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d802      	bhi.n	80031e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80031e2:	230e      	movs	r3, #14
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e057      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4a38      	ldr	r2, [pc, #224]	; (80032cc <USB_SetTurnaroundTime+0x124>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d906      	bls.n	80031fe <USB_SetTurnaroundTime+0x56>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <USB_SetTurnaroundTime+0x128>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d802      	bhi.n	80031fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80031f8:	230d      	movs	r3, #13
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	e04c      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4a33      	ldr	r2, [pc, #204]	; (80032d0 <USB_SetTurnaroundTime+0x128>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d906      	bls.n	8003214 <USB_SetTurnaroundTime+0x6c>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4a32      	ldr	r2, [pc, #200]	; (80032d4 <USB_SetTurnaroundTime+0x12c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d802      	bhi.n	8003214 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800320e:	230c      	movs	r3, #12
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e041      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4a2f      	ldr	r2, [pc, #188]	; (80032d4 <USB_SetTurnaroundTime+0x12c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d906      	bls.n	800322a <USB_SetTurnaroundTime+0x82>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4a2e      	ldr	r2, [pc, #184]	; (80032d8 <USB_SetTurnaroundTime+0x130>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d802      	bhi.n	800322a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003224:	230b      	movs	r3, #11
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e036      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <USB_SetTurnaroundTime+0x130>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d906      	bls.n	8003240 <USB_SetTurnaroundTime+0x98>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4a29      	ldr	r2, [pc, #164]	; (80032dc <USB_SetTurnaroundTime+0x134>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d802      	bhi.n	8003240 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800323a:	230a      	movs	r3, #10
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e02b      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4a26      	ldr	r2, [pc, #152]	; (80032dc <USB_SetTurnaroundTime+0x134>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d906      	bls.n	8003256 <USB_SetTurnaroundTime+0xae>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <USB_SetTurnaroundTime+0x138>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d802      	bhi.n	8003256 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003250:	2309      	movs	r3, #9
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e020      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <USB_SetTurnaroundTime+0x138>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d906      	bls.n	800326c <USB_SetTurnaroundTime+0xc4>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <USB_SetTurnaroundTime+0x13c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d802      	bhi.n	800326c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003266:	2308      	movs	r3, #8
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e015      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4a1d      	ldr	r2, [pc, #116]	; (80032e4 <USB_SetTurnaroundTime+0x13c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d906      	bls.n	8003282 <USB_SetTurnaroundTime+0xda>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <USB_SetTurnaroundTime+0x140>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d802      	bhi.n	8003282 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800327c:	2307      	movs	r3, #7
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e00a      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003282:	2306      	movs	r3, #6
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e007      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800328e:	2309      	movs	r3, #9
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e001      	b.n	8003298 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003294:	2309      	movs	r3, #9
 8003296:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	029b      	lsls	r3, r3, #10
 80032ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80032b0:	431a      	orrs	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	00d8acbf 	.word	0x00d8acbf
 80032c8:	00e4e1bf 	.word	0x00e4e1bf
 80032cc:	00f423ff 	.word	0x00f423ff
 80032d0:	0106737f 	.word	0x0106737f
 80032d4:	011a499f 	.word	0x011a499f
 80032d8:	01312cff 	.word	0x01312cff
 80032dc:	014ca43f 	.word	0x014ca43f
 80032e0:	016e35ff 	.word	0x016e35ff
 80032e4:	01a6ab1f 	.word	0x01a6ab1f
 80032e8:	01e847ff 	.word	0x01e847ff

080032ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f043 0201 	orr.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f023 0201 	bic.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d106      	bne.n	800335c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	e00b      	b.n	8003374 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	e001      	b.n	8003374 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e003      	b.n	800337c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003374:	2032      	movs	r0, #50	; 0x32
 8003376:	f7fd f975 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003384:	b084      	sub	sp, #16
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	e009      	b.n	80033b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	3340      	adds	r3, #64	; 0x40
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	2200      	movs	r2, #0
 80033b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	3301      	adds	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b0e      	cmp	r3, #14
 80033bc:	d9f2      	bls.n	80033a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80033be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d112      	bne.n	80033ea <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
 80033e8:	e00b      	b.n	8003402 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003408:	461a      	mov	r2, r3
 800340a:	2300      	movs	r3, #0
 800340c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003414:	4619      	mov	r1, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341c:	461a      	mov	r2, r3
 800341e:	680b      	ldr	r3, [r1, #0]
 8003420:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	2b01      	cmp	r3, #1
 8003426:	d10c      	bne.n	8003442 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800342e:	2100      	movs	r1, #0
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f961 	bl	80036f8 <USB_SetDevSpeed>
 8003436:	e008      	b.n	800344a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003438:	2101      	movs	r1, #1
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f95c 	bl	80036f8 <USB_SetDevSpeed>
 8003440:	e003      	b.n	800344a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003442:	2103      	movs	r1, #3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f957 	bl	80036f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800344a:	2110      	movs	r1, #16
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f90b 	bl	8003668 <USB_FlushTxFifo>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f929 	bl	80036b4 <USB_FlushRxFifo>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003472:	461a      	mov	r2, r3
 8003474:	2300      	movs	r3, #0
 8003476:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	461a      	mov	r2, r3
 8003480:	2300      	movs	r3, #0
 8003482:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348a:	461a      	mov	r2, r3
 800348c:	2300      	movs	r3, #0
 800348e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	e043      	b.n	800351e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ac:	d118      	bne.n	80034e0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c0:	461a      	mov	r2, r3
 80034c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	e013      	b.n	80034f2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	461a      	mov	r2, r3
 80034d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e008      	b.n	80034f2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ec:	461a      	mov	r2, r3
 80034ee:	2300      	movs	r3, #0
 80034f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fe:	461a      	mov	r2, r3
 8003500:	2300      	movs	r3, #0
 8003502:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003510:	461a      	mov	r2, r3
 8003512:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003516:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3301      	adds	r3, #1
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	d3b7      	bcc.n	8003496 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	e043      	b.n	80035b4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800353e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003542:	d118      	bne.n	8003576 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e013      	b.n	8003588 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356c:	461a      	mov	r2, r3
 800356e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	e008      	b.n	8003588 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	461a      	mov	r2, r3
 8003584:	2300      	movs	r3, #0
 8003586:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003594:	461a      	mov	r2, r3
 8003596:	2300      	movs	r3, #0
 8003598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a6:	461a      	mov	r2, r3
 80035a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3301      	adds	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d3b7      	bcc.n	800352c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ce:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d111      	bne.n	80035fa <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035dc:	461a      	mov	r2, r3
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <USB_DevInit+0x2dc>)
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	f043 0303 	orr.w	r3, r3, #3
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003606:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	2b00      	cmp	r3, #0
 800360c:	d105      	bne.n	800361a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f043 0210 	orr.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <USB_DevInit+0x2e0>)
 8003620:	4313      	orrs	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f043 0208 	orr.w	r2, r3, #8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800365a:	b004      	add	sp, #16
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	00800100 	.word	0x00800100
 8003664:	803c3800 	.word	0x803c3800

08003668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3301      	adds	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <USB_FlushTxFifo+0x48>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e006      	b.n	80036a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d0f0      	beq.n	8003682 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	00030d40 	.word	0x00030d40

080036b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2210      	movs	r2, #16
 80036c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3301      	adds	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <USB_FlushRxFifo+0x40>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e006      	b.n	80036e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d0f0      	beq.n	80036c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	00030d40 	.word	0x00030d40

080036f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003718:	4313      	orrs	r3, r2
 800371a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0306 	and.w	r3, r3, #6
 8003742:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
 800374e:	e00a      	b.n	8003766 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d002      	beq.n	800375c <USB_GetDevSpeed+0x32>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b06      	cmp	r3, #6
 800375a:	d102      	bne.n	8003762 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800375c:	2302      	movs	r3, #2
 800375e:	75fb      	strb	r3, [r7, #23]
 8003760:	e001      	b.n	8003766 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003762:	230f      	movs	r3, #15
 8003764:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d13a      	bne.n	8003806 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	2101      	movs	r1, #1
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	68f9      	ldr	r1, [r7, #12]
 80037aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d155      	bne.n	8003874 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	78db      	ldrb	r3, [r3, #3]
 80037e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	059b      	lsls	r3, r3, #22
 80037ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037ec:	4313      	orrs	r3, r2
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	0151      	lsls	r1, r2, #5
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	440a      	add	r2, r1
 80037f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	e036      	b.n	8003874 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003824:	4313      	orrs	r3, r2
 8003826:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11a      	bne.n	8003874 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	78db      	ldrb	r3, [r3, #3]
 8003858:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800385a:	430b      	orrs	r3, r1
 800385c:	4313      	orrs	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003872:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d135      	bne.n	800390c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	2101      	movs	r1, #1
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038c0:	4013      	ands	r3, r2
 80038c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	b29b      	uxth	r3, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038e4:	4013      	ands	r3, r2
 80038e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	0159      	lsls	r1, r3, #5
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003902:	4619      	mov	r1, r3
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <USB_DeactivateEndpoint+0x100>)
 8003906:	4013      	ands	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
 800390a:	e034      	b.n	8003976 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	2101      	movs	r1, #1
 800391e:	fa01 f303 	lsl.w	r3, r1, r3
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	43db      	mvns	r3, r3
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800392c:	4013      	ands	r3, r2
 800392e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	43db      	mvns	r3, r3
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003950:	4013      	ands	r3, r2
 8003952:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	0159      	lsls	r1, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	440b      	add	r3, r1
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	4619      	mov	r1, r3
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <USB_DeactivateEndpoint+0x104>)
 8003972:	4013      	ands	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	ec337800 	.word	0xec337800
 8003988:	eff37800 	.word	0xeff37800

0800398c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	; 0x28
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 815c 	bne.w	8003c66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d132      	bne.n	8003a1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	0151      	lsls	r1, r2, #5
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	440a      	add	r2, r1
 80039cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a14:	0cdb      	lsrs	r3, r3, #19
 8003a16:	04db      	lsls	r3, r3, #19
 8003a18:	6113      	str	r3, [r2, #16]
 8003a1a:	e074      	b.n	8003b06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a36:	0cdb      	lsrs	r3, r3, #19
 8003a38:	04db      	lsls	r3, r3, #19
 8003a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6959      	ldr	r1, [r3, #20]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	440b      	add	r3, r1
 8003a78:	1e59      	subs	r1, r3, #1
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a82:	04d9      	lsls	r1, r3, #19
 8003a84:	4b9d      	ldr	r3, [pc, #628]	; (8003cfc <USB_EPStartXfer+0x370>)
 8003a86:	400b      	ands	r3, r1
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	0148      	lsls	r0, r1, #5
 8003a8c:	69f9      	ldr	r1, [r7, #28]
 8003a8e:	4401      	add	r1, r0
 8003a90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	0148      	lsls	r0, r1, #5
 8003ab2:	69f9      	ldr	r1, [r7, #28]
 8003ab4:	4401      	add	r1, r0
 8003ab6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003aba:	4313      	orrs	r3, r2
 8003abc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	78db      	ldrb	r3, [r3, #3]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d11f      	bne.n	8003b06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	0151      	lsls	r1, r2, #5
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	440a      	add	r2, r1
 8003adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ae4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d14b      	bne.n	8003ba4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	78db      	ldrb	r3, [r3, #3]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d128      	bne.n	8003b82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d110      	bne.n	8003b62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	0151      	lsls	r1, r2, #5
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	440a      	add	r2, r1
 8003b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e00f      	b.n	8003b82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	0151      	lsls	r1, r2, #5
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	440a      	add	r2, r1
 8003b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e12f      	b.n	8003e04 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	0151      	lsls	r1, r2, #5
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	440a      	add	r2, r1
 8003bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	78db      	ldrb	r3, [r3, #3]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d015      	beq.n	8003bf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8117 	beq.w	8003e04 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	2101      	movs	r1, #1
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	69f9      	ldr	r1, [r7, #28]
 8003bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	634b      	str	r3, [r1, #52]	; 0x34
 8003bf6:	e105      	b.n	8003e04 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d110      	bne.n	8003c2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	e00f      	b.n	8003c4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	68d9      	ldr	r1, [r3, #12]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	b298      	uxth	r0, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fa2b 	bl	80040ba <USB_WritePacket>
 8003c64:	e0ce      	b.n	8003e04 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c80:	0cdb      	lsrs	r3, r3, #19
 8003c82:	04db      	lsls	r3, r3, #19
 8003c84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ca4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ca8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d126      	bne.n	8003d00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	0148      	lsls	r0, r1, #5
 8003ccc:	69f9      	ldr	r1, [r7, #28]
 8003cce:	4401      	add	r1, r0
 8003cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	0151      	lsls	r1, r2, #5
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	440a      	add	r2, r1
 8003cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cf6:	6113      	str	r3, [r2, #16]
 8003cf8:	e036      	b.n	8003d68 <USB_EPStartXfer+0x3dc>
 8003cfa:	bf00      	nop
 8003cfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4413      	add	r3, r2
 8003d0a:	1e5a      	subs	r2, r3, #1
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	8afb      	ldrh	r3, [r7, #22]
 8003d26:	04d9      	lsls	r1, r3, #19
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <USB_EPStartXfer+0x484>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	69b9      	ldr	r1, [r7, #24]
 8003d2e:	0148      	lsls	r0, r1, #5
 8003d30:	69f9      	ldr	r1, [r7, #28]
 8003d32:	4401      	add	r1, r0
 8003d34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	8af9      	ldrh	r1, [r7, #22]
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	69b9      	ldr	r1, [r7, #24]
 8003d5a:	0148      	lsls	r0, r1, #5
 8003d5c:	69f9      	ldr	r1, [r7, #28]
 8003d5e:	4401      	add	r1, r0
 8003d60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d64:	4313      	orrs	r3, r2
 8003d66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10d      	bne.n	8003d8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d86:	460a      	mov	r2, r1
 8003d88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	78db      	ldrb	r3, [r3, #3]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d128      	bne.n	8003de4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d110      	bne.n	8003dc4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e00f      	b.n	8003de4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	1ff80000 	.word	0x1ff80000

08003e14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f040 80cd 	bne.w	8003fd0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d132      	bne.n	8003ea4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9c:	0cdb      	lsrs	r3, r3, #19
 8003e9e:	04db      	lsls	r3, r3, #19
 8003ea0:	6113      	str	r3, [r2, #16]
 8003ea2:	e04e      	b.n	8003f42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ebe:	0cdb      	lsrs	r3, r3, #19
 8003ec0:	04db      	lsls	r3, r3, #19
 8003ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ede:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ee2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ee6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d903      	bls.n	8003efc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f32:	6939      	ldr	r1, [r7, #16]
 8003f34:	0148      	lsls	r0, r1, #5
 8003f36:	6979      	ldr	r1, [r7, #20]
 8003f38:	4401      	add	r1, r0
 8003f3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d11e      	bne.n	8003f86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	0151      	lsls	r1, r2, #5
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	440a      	add	r2, r1
 8003f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	e092      	b.n	80040ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fa4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07e      	beq.n	80040ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	6979      	ldr	r1, [r7, #20]
 8003fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	634b      	str	r3, [r1, #52]	; 0x34
 8003fce:	e06d      	b.n	80040ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fea:	0cdb      	lsrs	r3, r3, #19
 8003fec:	04db      	lsls	r3, r3, #19
 8003fee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800400e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004012:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004042:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405a:	6939      	ldr	r1, [r7, #16]
 800405c:	0148      	lsls	r0, r1, #5
 800405e:	6979      	ldr	r1, [r7, #20]
 8004060:	4401      	add	r1, r0
 8004062:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004066:	4313      	orrs	r3, r2
 8004068:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10d      	bne.n	800408c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	68d9      	ldr	r1, [r3, #12]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	460a      	mov	r2, r1
 800408a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	0151      	lsls	r1, r2, #5
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	440a      	add	r2, r1
 80040a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b089      	sub	sp, #36	; 0x24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	4611      	mov	r1, r2
 80040c6:	461a      	mov	r2, r3
 80040c8:	460b      	mov	r3, r1
 80040ca:	71fb      	strb	r3, [r7, #7]
 80040cc:	4613      	mov	r3, r2
 80040ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80040d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11a      	bne.n	8004116 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80040e0:	88bb      	ldrh	r3, [r7, #4]
 80040e2:	3303      	adds	r3, #3
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	e00f      	b.n	800410e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	031a      	lsls	r2, r3, #12
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fa:	461a      	mov	r2, r3
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3304      	adds	r3, #4
 8004106:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	3301      	adds	r3, #1
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	429a      	cmp	r2, r3
 8004114:	d3eb      	bcc.n	80040ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3724      	adds	r7, #36	; 0x24
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004124:	b480      	push	{r7}
 8004126:	b089      	sub	sp, #36	; 0x24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	3303      	adds	r3, #3
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e00b      	b.n	8004160 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	601a      	str	r2, [r3, #0]
    pDest++;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3304      	adds	r3, #4
 8004158:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	3301      	adds	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	429a      	cmp	r2, r3
 8004166:	d3ef      	bcc.n	8004148 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004168:	69fb      	ldr	r3, [r7, #28]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d12c      	bne.n	80041ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	db12      	blt.n	80041ca <USB_EPSetStall+0x54>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00f      	beq.n	80041ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e02b      	b.n	8004244 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db12      	blt.n	8004224 <USB_EPSetStall+0xae>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00f      	beq.n	8004224 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800421e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004222:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	440a      	add	r2, r1
 800423a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800423e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d128      	bne.n	80042c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004288:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800428c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	78db      	ldrb	r3, [r3, #3]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d003      	beq.n	800429e <USB_EPClearStall+0x4c>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	78db      	ldrb	r3, [r3, #3]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d138      	bne.n	8004310 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e027      	b.n	8004310 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	78db      	ldrb	r3, [r3, #3]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d003      	beq.n	80042f0 <USB_EPClearStall+0x9e>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	78db      	ldrb	r3, [r3, #3]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d10f      	bne.n	8004310 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	440a      	add	r2, r1
 8004306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004340:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004384:	f023 0302 	bic.w	r3, r3, #2
 8004388:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800438a:	2003      	movs	r0, #3
 800438c:	f7fc f96a 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b4:	f043 0302 	orr.w	r3, r3, #2
 80043b8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80043ba:	2003      	movs	r0, #3
 80043bc:	f7fc f952 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4013      	ands	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80043e2:	68fb      	ldr	r3, [r7, #12]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	0c1b      	lsrs	r3, r3, #16
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	b29b      	uxth	r3, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004486:	68bb      	ldr	r3, [r7, #8]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	01db      	lsls	r3, r3, #7
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044e2:	68bb      	ldr	r3, [r7, #8]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0301 	and.w	r3, r3, #1
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004526:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800452a:	f023 0307 	bic.w	r3, r3, #7
 800452e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0306 	and.w	r3, r3, #6
 800453c:	2b04      	cmp	r3, #4
 800453e:	d109      	bne.n	8004554 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454e:	f043 0303 	orr.w	r3, r3, #3
 8004552:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004566:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	460b      	mov	r3, r1
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	333c      	adds	r3, #60	; 0x3c
 800458e:	3304      	adds	r3, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4a26      	ldr	r2, [pc, #152]	; (8004630 <USB_EP0_OutStart+0xb8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d90a      	bls.n	80045b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ac:	d101      	bne.n	80045b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e037      	b.n	8004622 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e0:	f043 0318 	orr.w	r3, r3, #24
 80045e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80045f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80045fa:	7afb      	ldrb	r3, [r7, #11]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10f      	bne.n	8004620 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800461e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	4f54300a 	.word	0x4f54300a

08004634 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3301      	adds	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a13      	ldr	r2, [pc, #76]	; (8004698 <USB_CoreReset+0x64>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e01b      	b.n	800468a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	daf2      	bge.n	8004640 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <USB_CoreReset+0x64>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e006      	b.n	800468a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d0f0      	beq.n	800466a <USB_CoreReset+0x36>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	00030d40 	.word	0x00030d40

0800469c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	7c1b      	ldrb	r3, [r3, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d115      	bne.n	80046e0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80046b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046b8:	2202      	movs	r2, #2
 80046ba:	2181      	movs	r1, #129	; 0x81
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f002 f906 	bl	80068ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80046c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046cc:	2202      	movs	r2, #2
 80046ce:	2101      	movs	r1, #1
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f002 f8fc 	bl	80068ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80046de:	e012      	b.n	8004706 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	2202      	movs	r2, #2
 80046e4:	2181      	movs	r1, #129	; 0x81
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f002 f8f1 	bl	80068ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	2202      	movs	r2, #2
 80046f6:	2101      	movs	r1, #1
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f002 f8e8 	bl	80068ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004706:	2308      	movs	r3, #8
 8004708:	2203      	movs	r2, #3
 800470a:	2182      	movs	r1, #130	; 0x82
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f002 f8de 	bl	80068ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004718:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800471c:	f002 fb8c 	bl	8006e38 <malloc>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e026      	b.n	8004788 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004740:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7c1b      	ldrb	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800476a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800476e:	2101      	movs	r1, #1
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f002 f99d 	bl	8006ab0 <USBD_LL_PrepareReceive>
 8004776:	e007      	b.n	8004788 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	2101      	movs	r1, #1
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f002 f994 	bl	8006ab0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80047a2:	2181      	movs	r1, #129	; 0x81
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f002 f8b8 	bl	800691a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80047b0:	2101      	movs	r1, #1
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f002 f8b1 	bl	800691a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80047c0:	2182      	movs	r1, #130	; 0x82
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f002 f8a9 	bl	800691a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00e      	beq.n	80047f6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047e8:	4618      	mov	r0, r3
 80047ea:	f002 fb2d 	bl	8006e48 <free>
    pdev->pClassData = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004810:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004826:	2b00      	cmp	r3, #0
 8004828:	d039      	beq.n	800489e <USBD_CDC_Setup+0x9e>
 800482a:	2b20      	cmp	r3, #32
 800482c:	d17c      	bne.n	8004928 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	88db      	ldrh	r3, [r3, #6]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d029      	beq.n	800488a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	b25b      	sxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	da11      	bge.n	8004864 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800484c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	88d2      	ldrh	r2, [r2, #6]
 8004852:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004854:	6939      	ldr	r1, [r7, #16]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	88db      	ldrh	r3, [r3, #6]
 800485a:	461a      	mov	r2, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f001 f9c9 	bl	8005bf4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8004862:	e068      	b.n	8004936 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	785a      	ldrb	r2, [r3, #1]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	88db      	ldrh	r3, [r3, #6]
 8004872:	b2da      	uxtb	r2, r3
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800487a:	6939      	ldr	r1, [r7, #16]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	88db      	ldrh	r3, [r3, #6]
 8004880:	461a      	mov	r2, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f001 f9e4 	bl	8005c50 <USBD_CtlPrepareRx>
    break;
 8004888:	e055      	b.n	8004936 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	7850      	ldrb	r0, [r2, #1]
 8004896:	2200      	movs	r2, #0
 8004898:	6839      	ldr	r1, [r7, #0]
 800489a:	4798      	blx	r3
    break;
 800489c:	e04b      	b.n	8004936 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	2b0a      	cmp	r3, #10
 80048a4:	d017      	beq.n	80048d6 <USBD_CDC_Setup+0xd6>
 80048a6:	2b0b      	cmp	r3, #11
 80048a8:	d029      	beq.n	80048fe <USBD_CDC_Setup+0xfe>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d133      	bne.n	8004916 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d107      	bne.n	80048c8 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80048b8:	f107 030c 	add.w	r3, r7, #12
 80048bc:	2202      	movs	r2, #2
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 f997 	bl	8005bf4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80048c6:	e02e      	b.n	8004926 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f001 f927 	bl	8005b1e <USBD_CtlError>
			  ret = USBD_FAIL;
 80048d0:	2302      	movs	r3, #2
 80048d2:	75fb      	strb	r3, [r7, #23]
      break;
 80048d4:	e027      	b.n	8004926 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d107      	bne.n	80048f0 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80048e0:	f107 030f 	add.w	r3, r7, #15
 80048e4:	2201      	movs	r2, #1
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 f983 	bl	8005bf4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80048ee:	e01a      	b.n	8004926 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 f913 	bl	8005b1e <USBD_CtlError>
			  ret = USBD_FAIL;
 80048f8:	2302      	movs	r3, #2
 80048fa:	75fb      	strb	r3, [r7, #23]
      break;
 80048fc:	e013      	b.n	8004926 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004904:	2b03      	cmp	r3, #3
 8004906:	d00d      	beq.n	8004924 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 f907 	bl	8005b1e <USBD_CtlError>
			  ret = USBD_FAIL;
 8004910:	2302      	movs	r3, #2
 8004912:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004914:	e006      	b.n	8004924 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f001 f900 	bl	8005b1e <USBD_CtlError>
      ret = USBD_FAIL;
 800491e:	2302      	movs	r3, #2
 8004920:	75fb      	strb	r3, [r7, #23]
      break;
 8004922:	e000      	b.n	8004926 <USBD_CDC_Setup+0x126>
      break;
 8004924:	bf00      	nop
    }
    break;
 8004926:	e006      	b.n	8004936 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f001 f8f7 	bl	8005b1e <USBD_CtlError>
    ret = USBD_FAIL;
 8004930:	2302      	movs	r3, #2
 8004932:	75fb      	strb	r3, [r7, #23]
    break;
 8004934:	bf00      	nop
  }

  return ret;
 8004936:	7dfb      	ldrb	r3, [r7, #23]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004952:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800495a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004962:	2b00      	cmp	r3, #0
 8004964:	d03a      	beq.n	80049dc <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	331c      	adds	r3, #28
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d029      	beq.n	80049d0 <USBD_CDC_DataIn+0x90>
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	331c      	adds	r3, #28
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	78f9      	ldrb	r1, [r7, #3]
 8004990:	68b8      	ldr	r0, [r7, #8]
 8004992:	460b      	mov	r3, r1
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	1a5b      	subs	r3, r3, r1
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4403      	add	r3, r0
 800499c:	3344      	adds	r3, #68	; 0x44
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80049a4:	fb03 f301 	mul.w	r3, r3, r1
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d110      	bne.n	80049d0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	331c      	adds	r3, #28
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80049c2:	78f9      	ldrb	r1, [r7, #3]
 80049c4:	2300      	movs	r3, #0
 80049c6:	2200      	movs	r2, #0
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f002 f84e 	bl	8006a6a <USBD_LL_Transmit>
 80049ce:	e003      	b.n	80049d8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f002 f879 	bl	8006af6 <USBD_LL_GetRxDataSize>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4798      	blx	r3

    return USBD_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004a4a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d015      	beq.n	8004a82 <USBD_CDC_EP0_RxReady+0x46>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004a5c:	2bff      	cmp	r3, #255	; 0xff
 8004a5e:	d010      	beq.n	8004a82 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004a6e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004a76:	b292      	uxth	r2, r2
 8004a78:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	22ff      	movs	r2, #255	; 0xff
 8004a7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2243      	movs	r2, #67	; 0x43
 8004a98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004a9a:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	20000090 	.word	0x20000090

08004aac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2243      	movs	r2, #67	; 0x43
 8004ab8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004aba:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	2000004c 	.word	0x2000004c

08004acc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2243      	movs	r2, #67	; 0x43
 8004ad8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004ada:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	200000d4 	.word	0x200000d4

08004aec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	220a      	movs	r2, #10
 8004af8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004afa:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000008 	.word	0x20000008

08004b0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004b16:	2302      	movs	r3, #2
 8004b18:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b087      	sub	sp, #28
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	4613      	mov	r3, r2
 8004b46:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004b4e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004b7e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004ba4:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01c      	beq.n	8004bea <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d115      	bne.n	8004be6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2181      	movs	r1, #129	; 0x81
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f001 ff44 	bl	8006a6a <USBD_LL_Transmit>

      return USBD_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e002      	b.n	8004bec <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004bea:	2302      	movs	r3, #2
  }
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d017      	beq.n	8004c3e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7c1b      	ldrb	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c20:	2101      	movs	r1, #1
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f001 ff44 	bl	8006ab0 <USBD_LL_PrepareReceive>
 8004c28:	e007      	b.n	8004c3a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c30:	2340      	movs	r3, #64	; 0x40
 8004c32:	2101      	movs	r1, #1
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f001 ff3b 	bl	8006ab0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e01a      	b.n	8004c96 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	79fa      	ldrb	r2, [r7, #7]
 8004c8c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f001 fdb6 	bl	8006800 <USBD_LL_Init>

  return USBD_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d006      	beq.n	8004cc0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
 8004cbe:	e001      	b.n	8004cc4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 fddc 	bl	8006898 <USBD_LL_Start>

  return USBD_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00c      	beq.n	8004d34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	4611      	mov	r1, r2
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	4611      	mov	r1, r2
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
  return USBD_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fe94 	bl	8005aa4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d00c      	beq.n	8004dba <USBD_LL_SetupStage+0x56>
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d302      	bcc.n	8004daa <USBD_LL_SetupStage+0x46>
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d010      	beq.n	8004dca <USBD_LL_SetupStage+0x66>
 8004da8:	e017      	b.n	8004dda <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fa04 	bl	80051c0 <USBD_StdDevReq>
    break;
 8004db8:	e01a      	b.n	8004df0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa66 	bl	8005294 <USBD_StdItfReq>
    break;
 8004dc8:	e012      	b.n	8004df0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 faa4 	bl	8005320 <USBD_StdEPReq>
    break;
 8004dd8:	e00a      	b.n	8004df0 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004de0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f001 fdb5 	bl	8006958 <USBD_LL_StallEP>
    break;
 8004dee:	bf00      	nop
  }

  return USBD_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	460b      	mov	r3, r1
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004e08:	7afb      	ldrb	r3, [r7, #11]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d14b      	bne.n	8004ea6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004e14:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d134      	bne.n	8004e8a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d919      	bls.n	8004e60 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	1ad2      	subs	r2, r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d203      	bcs.n	8004e4e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	e002      	b.n	8004e54 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 ff17 	bl	8005c8c <USBD_CtlContinueRx>
 8004e5e:	e038      	b.n	8004ed2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d105      	bne.n	8004e82 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 ff14 	bl	8005cb0 <USBD_CtlSendStatus>
 8004e88:	e023      	b.n	8004ed2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d11e      	bne.n	8004ed2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f001 fd5a 	bl	8006958 <USBD_LL_StallEP>
 8004ea4:	e015      	b.n	8004ed2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d108      	bne.n	8004ece <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	7afa      	ldrb	r2, [r7, #11]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	4798      	blx	r3
 8004ecc:	e001      	b.n	8004ed2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e000      	b.n	8004ed4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004eea:	7afb      	ldrb	r3, [r7, #11]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d17f      	bne.n	8004ff0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d15c      	bne.n	8004fba <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d915      	bls.n	8004f38 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fe81 	bl	8005c2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2100      	movs	r1, #0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f001 fdbd 	bl	8006ab0 <USBD_LL_PrepareReceive>
 8004f36:	e04e      	b.n	8004fd6 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	6912      	ldr	r2, [r2, #16]
 8004f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f44:	fb02 f201 	mul.w	r2, r2, r1
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d11c      	bne.n	8004f88 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d316      	bcc.n	8004f88 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d20f      	bcs.n	8004f88 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 fe5d 	bl	8005c2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f001 fd95 	bl	8006ab0 <USBD_LL_PrepareReceive>
 8004f86:	e026      	b.n	8004fd6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d105      	bne.n	8004faa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004faa:	2180      	movs	r1, #128	; 0x80
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f001 fcd3 	bl	8006958 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fe8f 	bl	8005cd6 <USBD_CtlReceiveStatus>
 8004fb8:	e00d      	b.n	8004fd6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d004      	beq.n	8004fce <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f001 fcc1 	bl	8006958 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d11d      	bne.n	800501c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff fe82 	bl	8004cea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004fee:	e015      	b.n	800501c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8005002:	2b03      	cmp	r3, #3
 8005004:	d108      	bne.n	8005018 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	7afa      	ldrb	r2, [r7, #11]
 8005010:	4611      	mov	r1, r2
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	4798      	blx	r3
 8005016:	e001      	b.n	800501c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005018:	2302      	movs	r3, #2
 800501a:	e000      	b.n	800501e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800502e:	2340      	movs	r3, #64	; 0x40
 8005030:	2200      	movs	r2, #0
 8005032:	2100      	movs	r1, #0
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 fc4a 	bl	80068ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2240      	movs	r2, #64	; 0x40
 8005046:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	2200      	movs	r2, #0
 800504e:	2180      	movs	r1, #128	; 0x80
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 fc3c 	bl	80068ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2240      	movs	r2, #64	; 0x40
 8005060:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6852      	ldr	r2, [r2, #4]
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	4611      	mov	r1, r2
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
  }

  return USBD_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	78fa      	ldrb	r2, [r7, #3]
 80050b8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2204      	movs	r2, #4
 80050e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005122:	2b03      	cmp	r3, #3
 8005124:	d10b      	bne.n	800513e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6852      	ldr	r2, [r2, #4]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	4611      	mov	r1, r2
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3

  return USBD_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d004      	beq.n	80051e4 <USBD_StdDevReq+0x24>
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d002      	beq.n	80051e4 <USBD_StdDevReq+0x24>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <USBD_StdDevReq+0x34>
 80051e2:	e04c      	b.n	800527e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
    break;
 80051f2:	e049      	b.n	8005288 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b09      	cmp	r3, #9
 80051fa:	d83a      	bhi.n	8005272 <USBD_StdDevReq+0xb2>
 80051fc:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <USBD_StdDevReq+0x44>)
 80051fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005202:	bf00      	nop
 8005204:	08005255 	.word	0x08005255
 8005208:	08005269 	.word	0x08005269
 800520c:	08005273 	.word	0x08005273
 8005210:	0800525f 	.word	0x0800525f
 8005214:	08005273 	.word	0x08005273
 8005218:	08005237 	.word	0x08005237
 800521c:	0800522d 	.word	0x0800522d
 8005220:	08005273 	.word	0x08005273
 8005224:	0800524b 	.word	0x0800524b
 8005228:	08005241 	.word	0x08005241
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9d2 	bl	80055d8 <USBD_GetDescriptor>
      break;
 8005234:	e022      	b.n	800527c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fac7 	bl	80057cc <USBD_SetAddress>
      break;
 800523e:	e01d      	b.n	800527c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fb04 	bl	8005850 <USBD_SetConfig>
      break;
 8005248:	e018      	b.n	800527c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fb8d 	bl	800596c <USBD_GetConfig>
      break;
 8005252:	e013      	b.n	800527c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fbbc 	bl	80059d4 <USBD_GetStatus>
      break;
 800525c:	e00e      	b.n	800527c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800525e:	6839      	ldr	r1, [r7, #0]
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fbea 	bl	8005a3a <USBD_SetFeature>
      break;
 8005266:	e009      	b.n	800527c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fbf9 	bl	8005a62 <USBD_ClrFeature>
      break;
 8005270:	e004      	b.n	800527c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fc52 	bl	8005b1e <USBD_CtlError>
      break;
 800527a:	bf00      	nop
    }
    break;
 800527c:	e004      	b.n	8005288 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fc4c 	bl	8005b1e <USBD_CtlError>
    break;
 8005286:	bf00      	nop
  }

  return ret;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop

08005294 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d003      	beq.n	80052b6 <USBD_StdItfReq+0x22>
 80052ae:	2b40      	cmp	r3, #64	; 0x40
 80052b0:	d001      	beq.n	80052b6 <USBD_StdItfReq+0x22>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d12a      	bne.n	800530c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80052bc:	3b01      	subs	r3, #1
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d81d      	bhi.n	80052fe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	889b      	ldrh	r3, [r3, #4]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d813      	bhi.n	80052f4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
 80052da:	4603      	mov	r3, r0
 80052dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	88db      	ldrh	r3, [r3, #6]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d110      	bne.n	8005308 <USBD_StdItfReq+0x74>
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10d      	bne.n	8005308 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fcdf 	bl	8005cb0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80052f2:	e009      	b.n	8005308 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fc11 	bl	8005b1e <USBD_CtlError>
      break;
 80052fc:	e004      	b.n	8005308 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fc0c 	bl	8005b1e <USBD_CtlError>
      break;
 8005306:	e000      	b.n	800530a <USBD_StdItfReq+0x76>
      break;
 8005308:	bf00      	nop
    }
    break;
 800530a:	e004      	b.n	8005316 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fc05 	bl	8005b1e <USBD_CtlError>
    break;
 8005314:	bf00      	nop
  }

  return USBD_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	889b      	ldrh	r3, [r3, #4]
 8005332:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800533c:	2b20      	cmp	r3, #32
 800533e:	d004      	beq.n	800534a <USBD_StdEPReq+0x2a>
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d002      	beq.n	800534a <USBD_StdEPReq+0x2a>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <USBD_StdEPReq+0x3a>
 8005348:	e13b      	b.n	80055c2 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
    break;
 8005358:	e138      	b.n	80055cc <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005362:	2b20      	cmp	r3, #32
 8005364:	d10a      	bne.n	800537c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
 8005374:	4603      	mov	r3, r0
 8005376:	73fb      	strb	r3, [r7, #15]

      return ret;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	e128      	b.n	80055ce <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d03e      	beq.n	8005402 <USBD_StdEPReq+0xe2>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d002      	beq.n	800538e <USBD_StdEPReq+0x6e>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d070      	beq.n	800546e <USBD_StdEPReq+0x14e>
 800538c:	e113      	b.n	80055b6 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005394:	2b02      	cmp	r3, #2
 8005396:	d002      	beq.n	800539e <USBD_StdEPReq+0x7e>
 8005398:	2b03      	cmp	r3, #3
 800539a:	d015      	beq.n	80053c8 <USBD_StdEPReq+0xa8>
 800539c:	e02b      	b.n	80053f6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00c      	beq.n	80053be <USBD_StdEPReq+0x9e>
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d009      	beq.n	80053be <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80053aa:	7bbb      	ldrb	r3, [r7, #14]
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 fad2 	bl	8006958 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80053b4:	2180      	movs	r1, #128	; 0x80
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 face 	bl	8006958 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80053bc:	e020      	b.n	8005400 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fbac 	bl	8005b1e <USBD_CtlError>
        break;
 80053c6:	e01b      	b.n	8005400 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	885b      	ldrh	r3, [r3, #2]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10e      	bne.n	80053ee <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053d0:	7bbb      	ldrb	r3, [r7, #14]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <USBD_StdEPReq+0xce>
 80053d6:	7bbb      	ldrb	r3, [r7, #14]
 80053d8:	2b80      	cmp	r3, #128	; 0x80
 80053da:	d008      	beq.n	80053ee <USBD_StdEPReq+0xce>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	88db      	ldrh	r3, [r3, #6]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 fab5 	bl	8006958 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fc5e 	bl	8005cb0 <USBD_CtlSendStatus>

        break;
 80053f4:	e004      	b.n	8005400 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fb90 	bl	8005b1e <USBD_CtlError>
        break;
 80053fe:	bf00      	nop
      }
      break;
 8005400:	e0de      	b.n	80055c0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005408:	2b02      	cmp	r3, #2
 800540a:	d002      	beq.n	8005412 <USBD_StdEPReq+0xf2>
 800540c:	2b03      	cmp	r3, #3
 800540e:	d015      	beq.n	800543c <USBD_StdEPReq+0x11c>
 8005410:	e026      	b.n	8005460 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005412:	7bbb      	ldrb	r3, [r7, #14]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <USBD_StdEPReq+0x112>
 8005418:	7bbb      	ldrb	r3, [r7, #14]
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d009      	beq.n	8005432 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800541e:	7bbb      	ldrb	r3, [r7, #14]
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 fa98 	bl	8006958 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005428:	2180      	movs	r1, #128	; 0x80
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 fa94 	bl	8006958 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005430:	e01c      	b.n	800546c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fb72 	bl	8005b1e <USBD_CtlError>
        break;
 800543a:	e017      	b.n	800546c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	885b      	ldrh	r3, [r3, #2]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d112      	bne.n	800546a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 fa9f 	bl	8006996 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fc29 	bl	8005cb0 <USBD_CtlSendStatus>
        }
        break;
 800545e:	e004      	b.n	800546a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fb5b 	bl	8005b1e <USBD_CtlError>
        break;
 8005468:	e000      	b.n	800546c <USBD_StdEPReq+0x14c>
        break;
 800546a:	bf00      	nop
      }
      break;
 800546c:	e0a8      	b.n	80055c0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005474:	2b02      	cmp	r3, #2
 8005476:	d002      	beq.n	800547e <USBD_StdEPReq+0x15e>
 8005478:	2b03      	cmp	r3, #3
 800547a:	d031      	beq.n	80054e0 <USBD_StdEPReq+0x1c0>
 800547c:	e095      	b.n	80055aa <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800547e:	7bbb      	ldrb	r3, [r7, #14]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <USBD_StdEPReq+0x174>
 8005484:	7bbb      	ldrb	r3, [r7, #14]
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d004      	beq.n	8005494 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fb46 	bl	8005b1e <USBD_CtlError>
          break;
 8005492:	e08f      	b.n	80055b4 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005498:	2b00      	cmp	r3, #0
 800549a:	da0b      	bge.n	80054b4 <USBD_StdEPReq+0x194>
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	3310      	adds	r3, #16
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	3304      	adds	r3, #4
 80054b2:	e00a      	b.n	80054ca <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	4413      	add	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2202      	movs	r2, #2
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fb8b 	bl	8005bf4 <USBD_CtlSendData>
          break;
 80054de:	e069      	b.n	80055b4 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80054e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	da11      	bge.n	800550c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	f003 020f 	and.w	r2, r3, #15
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	3318      	adds	r3, #24
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d117      	bne.n	8005532 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fb0a 	bl	8005b1e <USBD_CtlError>
            break;
 800550a:	e053      	b.n	80055b4 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800550c:	7bbb      	ldrb	r3, [r7, #14]
 800550e:	f003 020f 	and.w	r2, r3, #15
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 faf7 	bl	8005b1e <USBD_CtlError>
            break;
 8005530:	e040      	b.n	80055b4 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005536:	2b00      	cmp	r3, #0
 8005538:	da0b      	bge.n	8005552 <USBD_StdEPReq+0x232>
 800553a:	7bbb      	ldrb	r3, [r7, #14]
 800553c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	3310      	adds	r3, #16
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	3304      	adds	r3, #4
 8005550:	e00a      	b.n	8005568 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005552:	7bbb      	ldrb	r3, [r7, #14]
 8005554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <USBD_StdEPReq+0x256>
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	2b80      	cmp	r3, #128	; 0x80
 8005574:	d103      	bne.n	800557e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e00e      	b.n	800559c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800557e:	7bbb      	ldrb	r3, [r7, #14]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fa26 	bl	80069d4 <USBD_LL_IsStallEP>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e002      	b.n	800559c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2202      	movs	r2, #2
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fb26 	bl	8005bf4 <USBD_CtlSendData>
          break;
 80055a8:	e004      	b.n	80055b4 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fab6 	bl	8005b1e <USBD_CtlError>
        break;
 80055b2:	bf00      	nop
      }
      break;
 80055b4:	e004      	b.n	80055c0 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80055b6:	6839      	ldr	r1, [r7, #0]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fab0 	bl	8005b1e <USBD_CtlError>
      break;
 80055be:	bf00      	nop
    }
    break;
 80055c0:	e004      	b.n	80055cc <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 faaa 	bl	8005b1e <USBD_CtlError>
    break;
 80055ca:	bf00      	nop
  }

  return ret;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	885b      	ldrh	r3, [r3, #2]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	2b06      	cmp	r3, #6
 80055ee:	f200 80c9 	bhi.w	8005784 <USBD_GetDescriptor+0x1ac>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <USBD_GetDescriptor+0x20>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800562d 	.word	0x0800562d
 8005600:	0800566d 	.word	0x0800566d
 8005604:	08005785 	.word	0x08005785
 8005608:	08005785 	.word	0x08005785
 800560c:	08005731 	.word	0x08005731
 8005610:	08005757 	.word	0x08005757
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	7c12      	ldrb	r2, [r2, #16]
 8005620:	f107 010a 	add.w	r1, r7, #10
 8005624:	4610      	mov	r0, r2
 8005626:	4798      	blx	r3
 8005628:	60f8      	str	r0, [r7, #12]
    break;
 800562a:	e0b0      	b.n	800578e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7c1b      	ldrb	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10d      	bne.n	8005650 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	f107 020a 	add.w	r2, r7, #10
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
 8005644:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	2202      	movs	r2, #2
 800564c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800564e:	e09e      	b.n	800578e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f107 020a 	add.w	r2, r7, #10
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
 8005660:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	2202      	movs	r2, #2
 8005668:	701a      	strb	r2, [r3, #0]
    break;
 800566a:	e090      	b.n	800578e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	885b      	ldrh	r3, [r3, #2]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b05      	cmp	r3, #5
 8005674:	d856      	bhi.n	8005724 <USBD_GetDescriptor+0x14c>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <USBD_GetDescriptor+0xa4>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	08005695 	.word	0x08005695
 8005680:	080056ad 	.word	0x080056ad
 8005684:	080056c5 	.word	0x080056c5
 8005688:	080056dd 	.word	0x080056dd
 800568c:	080056f5 	.word	0x080056f5
 8005690:	0800570d 	.word	0x0800570d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	7c12      	ldrb	r2, [r2, #16]
 80056a0:	f107 010a 	add.w	r1, r7, #10
 80056a4:	4610      	mov	r0, r2
 80056a6:	4798      	blx	r3
 80056a8:	60f8      	str	r0, [r7, #12]
      break;
 80056aa:	e040      	b.n	800572e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	7c12      	ldrb	r2, [r2, #16]
 80056b8:	f107 010a 	add.w	r1, r7, #10
 80056bc:	4610      	mov	r0, r2
 80056be:	4798      	blx	r3
 80056c0:	60f8      	str	r0, [r7, #12]
      break;
 80056c2:	e034      	b.n	800572e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	7c12      	ldrb	r2, [r2, #16]
 80056d0:	f107 010a 	add.w	r1, r7, #10
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
 80056d8:	60f8      	str	r0, [r7, #12]
      break;
 80056da:	e028      	b.n	800572e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	7c12      	ldrb	r2, [r2, #16]
 80056e8:	f107 010a 	add.w	r1, r7, #10
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
 80056f0:	60f8      	str	r0, [r7, #12]
      break;
 80056f2:	e01c      	b.n	800572e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	7c12      	ldrb	r2, [r2, #16]
 8005700:	f107 010a 	add.w	r1, r7, #10
 8005704:	4610      	mov	r0, r2
 8005706:	4798      	blx	r3
 8005708:	60f8      	str	r0, [r7, #12]
      break;
 800570a:	e010      	b.n	800572e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	7c12      	ldrb	r2, [r2, #16]
 8005718:	f107 010a 	add.w	r1, r7, #10
 800571c:	4610      	mov	r0, r2
 800571e:	4798      	blx	r3
 8005720:	60f8      	str	r0, [r7, #12]
      break;
 8005722:	e004      	b.n	800572e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f9f9 	bl	8005b1e <USBD_CtlError>
      return;
 800572c:	e04b      	b.n	80057c6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800572e:	e02e      	b.n	800578e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7c1b      	ldrb	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	f107 020a 	add.w	r2, r7, #10
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
 8005748:	60f8      	str	r0, [r7, #12]
      break;
 800574a:	e020      	b.n	800578e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9e5 	bl	8005b1e <USBD_CtlError>
      return;
 8005754:	e037      	b.n	80057c6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	7c1b      	ldrb	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10d      	bne.n	800577a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	f107 020a 	add.w	r2, r7, #10
 800576a:	4610      	mov	r0, r2
 800576c:	4798      	blx	r3
 800576e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	2207      	movs	r2, #7
 8005776:	701a      	strb	r2, [r3, #0]
      break;
 8005778:	e009      	b.n	800578e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f9ce 	bl	8005b1e <USBD_CtlError>
      return;
 8005782:	e020      	b.n	80057c6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f9c9 	bl	8005b1e <USBD_CtlError>
    return;
 800578c:	e01b      	b.n	80057c6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d011      	beq.n	80057b8 <USBD_GetDescriptor+0x1e0>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	88db      	ldrh	r3, [r3, #6]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00d      	beq.n	80057b8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	88da      	ldrh	r2, [r3, #6]
 80057a0:	897b      	ldrh	r3, [r7, #10]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	bf28      	it	cs
 80057a6:	4613      	movcs	r3, r2
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80057ac:	897b      	ldrh	r3, [r7, #10]
 80057ae:	461a      	mov	r2, r3
 80057b0:	68f9      	ldr	r1, [r7, #12]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa1e 	bl	8005bf4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	88db      	ldrh	r3, [r3, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fa75 	bl	8005cb0 <USBD_CtlSendStatus>
  }
}
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	889b      	ldrh	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d130      	bne.n	8005840 <USBD_SetAddress+0x74>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	88db      	ldrh	r3, [r3, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d12c      	bne.n	8005840 <USBD_SetAddress+0x74>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	885b      	ldrh	r3, [r3, #2]
 80057ea:	2b7f      	cmp	r3, #127	; 0x7f
 80057ec:	d828      	bhi.n	8005840 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	885b      	ldrh	r3, [r3, #2]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005800:	2b03      	cmp	r3, #3
 8005802:	d104      	bne.n	800580e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f989 	bl	8005b1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800580c:	e01c      	b.n	8005848 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7bfa      	ldrb	r2, [r7, #15]
 8005812:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 f906 	bl	8006a2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fa45 	bl	8005cb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005834:	e008      	b.n	8005848 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583e:	e003      	b.n	8005848 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f96b 	bl	8005b1e <USBD_CtlError>
  }
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	885b      	ldrh	r3, [r3, #2]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	4b41      	ldr	r3, [pc, #260]	; (8005968 <USBD_SetConfig+0x118>)
 8005862:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005864:	4b40      	ldr	r3, [pc, #256]	; (8005968 <USBD_SetConfig+0x118>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d904      	bls.n	8005876 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f955 	bl	8005b1e <USBD_CtlError>
 8005874:	e075      	b.n	8005962 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800587c:	2b02      	cmp	r3, #2
 800587e:	d002      	beq.n	8005886 <USBD_SetConfig+0x36>
 8005880:	2b03      	cmp	r3, #3
 8005882:	d023      	beq.n	80058cc <USBD_SetConfig+0x7c>
 8005884:	e062      	b.n	800594c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005886:	4b38      	ldr	r3, [pc, #224]	; (8005968 <USBD_SetConfig+0x118>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01a      	beq.n	80058c4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800588e:	4b36      	ldr	r3, [pc, #216]	; (8005968 <USBD_SetConfig+0x118>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2203      	movs	r2, #3
 800589c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80058a0:	4b31      	ldr	r3, [pc, #196]	; (8005968 <USBD_SetConfig+0x118>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fa2a 	bl	8004d00 <USBD_SetClassConfig>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d104      	bne.n	80058bc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f932 	bl	8005b1e <USBD_CtlError>
          return;
 80058ba:	e052      	b.n	8005962 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f9f7 	bl	8005cb0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80058c2:	e04e      	b.n	8005962 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f9f3 	bl	8005cb0 <USBD_CtlSendStatus>
      break;
 80058ca:	e04a      	b.n	8005962 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80058cc:	4b26      	ldr	r3, [pc, #152]	; (8005968 <USBD_SetConfig+0x118>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d112      	bne.n	80058fa <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80058dc:	4b22      	ldr	r3, [pc, #136]	; (8005968 <USBD_SetConfig+0x118>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <USBD_SetConfig+0x118>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fa26 	bl	8004d3e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9dc 	bl	8005cb0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80058f8:	e033      	b.n	8005962 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <USBD_SetConfig+0x118>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d01d      	beq.n	8005944 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff fa14 	bl	8004d3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <USBD_SetConfig+0x118>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005920:	4b11      	ldr	r3, [pc, #68]	; (8005968 <USBD_SetConfig+0x118>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff f9ea 	bl	8004d00 <USBD_SetClassConfig>
 800592c:	4603      	mov	r3, r0
 800592e:	2b02      	cmp	r3, #2
 8005930:	d104      	bne.n	800593c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8f2 	bl	8005b1e <USBD_CtlError>
          return;
 800593a:	e012      	b.n	8005962 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f9b7 	bl	8005cb0 <USBD_CtlSendStatus>
      break;
 8005942:	e00e      	b.n	8005962 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f9b3 	bl	8005cb0 <USBD_CtlSendStatus>
      break;
 800594a:	e00a      	b.n	8005962 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8e5 	bl	8005b1e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005954:	4b04      	ldr	r3, [pc, #16]	; (8005968 <USBD_SetConfig+0x118>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff f9ef 	bl	8004d3e <USBD_ClrClassConfig>
      break;
 8005960:	bf00      	nop
    }
  }
}
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	200001fc 	.word	0x200001fc

0800596c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d004      	beq.n	8005988 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8cc 	bl	8005b1e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005986:	e021      	b.n	80059cc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800598e:	2b01      	cmp	r3, #1
 8005990:	db17      	blt.n	80059c2 <USBD_GetConfig+0x56>
 8005992:	2b02      	cmp	r3, #2
 8005994:	dd02      	ble.n	800599c <USBD_GetConfig+0x30>
 8005996:	2b03      	cmp	r3, #3
 8005998:	d00b      	beq.n	80059b2 <USBD_GetConfig+0x46>
 800599a:	e012      	b.n	80059c2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3308      	adds	r3, #8
 80059a6:	2201      	movs	r2, #1
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f922 	bl	8005bf4 <USBD_CtlSendData>
      break;
 80059b0:	e00c      	b.n	80059cc <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3304      	adds	r3, #4
 80059b6:	2201      	movs	r2, #1
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f91a 	bl	8005bf4 <USBD_CtlSendData>
      break;
 80059c0:	e004      	b.n	80059cc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8aa 	bl	8005b1e <USBD_CtlError>
      break;
 80059ca:	bf00      	nop
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059e4:	3b01      	subs	r3, #1
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d81e      	bhi.n	8005a28 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	88db      	ldrh	r3, [r3, #6]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d004      	beq.n	80059fc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f892 	bl	8005b1e <USBD_CtlError>
      break;
 80059fa:	e01a      	b.n	8005a32 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f043 0202 	orr.w	r2, r3, #2
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f8e7 	bl	8005bf4 <USBD_CtlSendData>
    break;
 8005a26:	e004      	b.n	8005a32 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f877 	bl	8005b1e <USBD_CtlError>
    break;
 8005a30:	bf00      	nop
  }
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	885b      	ldrh	r3, [r3, #2]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d106      	bne.n	8005a5a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f92b 	bl	8005cb0 <USBD_CtlSendStatus>
  }

}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005a72:	3b01      	subs	r3, #1
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d80b      	bhi.n	8005a90 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	885b      	ldrh	r3, [r3, #2]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d10c      	bne.n	8005a9a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f911 	bl	8005cb0 <USBD_CtlSendStatus>
    }
    break;
 8005a8e:	e004      	b.n	8005a9a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f843 	bl	8005b1e <USBD_CtlError>
    break;
 8005a98:	e000      	b.n	8005a9c <USBD_ClrFeature+0x3a>
    break;
 8005a9a:	bf00      	nop
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	785a      	ldrb	r2, [r3, #1]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	3303      	adds	r3, #3
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	3304      	adds	r3, #4
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	3305      	adds	r3, #5
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	3306      	adds	r3, #6
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	3307      	adds	r3, #7
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	80da      	strh	r2, [r3, #6]

}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005b28:	2180      	movs	r1, #128	; 0x80
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 ff14 	bl	8006958 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005b30:	2100      	movs	r1, #0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 ff10 	bl	8006958 <USBD_LL_StallEP>
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d032      	beq.n	8005bbc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f834 	bl	8005bc4 <USBD_GetLen>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	3301      	adds	r3, #1
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	75fa      	strb	r2, [r7, #23]
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4413      	add	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	7812      	ldrb	r2, [r2, #0]
 8005b7a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	75fa      	strb	r2, [r7, #23]
 8005b82:	461a      	mov	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4413      	add	r3, r2
 8005b88:	2203      	movs	r2, #3
 8005b8a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005b8c:	e012      	b.n	8005bb4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	60fa      	str	r2, [r7, #12]
 8005b94:	7dfa      	ldrb	r2, [r7, #23]
 8005b96:	1c51      	adds	r1, r2, #1
 8005b98:	75f9      	strb	r1, [r7, #23]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	75fa      	strb	r2, [r7, #23]
 8005baa:	461a      	mov	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4413      	add	r3, r2
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e8      	bne.n	8005b8e <USBD_GetString+0x4e>
    }
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8005bd0:	e005      	b.n	8005bde <USBD_GetLen+0x1a>
    {
        len++;
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f5      	bne.n	8005bd2 <USBD_GetLen+0xe>
    }

    return len;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 ff24 	bl	8006a6a <USBD_LL_Transmit>

  return USBD_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	2100      	movs	r1, #0
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 ff12 	bl	8006a6a <USBD_LL_Transmit>

  return USBD_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2203      	movs	r2, #3
 8005c62:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 ff17 	bl	8006ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 ff05 	bl	8006ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fecf 	bl	8006a6a <USBD_LL_Transmit>

  return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2205      	movs	r2, #5
 8005ce2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2100      	movs	r1, #0
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fedf 	bl	8006ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b0a0      	sub	sp, #128	; 0x80
 8005d00:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d02:	f7fa fc3d 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d06:	f000 f8e1 	bl	8005ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d0a:	f000 f977 	bl	8005ffc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005d0e:	f000 f94b 	bl	8005fa8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8005d12:	f000 fb1b 	bl	800634c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  int state = STATE_OP1;
 8005d16:	2300      	movs	r3, #0
 8005d18:	67fb      	str	r3, [r7, #124]	; 0x7c
  int op1 = 0, op2 = 0, result = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d1e:	2300      	movs	r3, #0
 8005d20:	677b      	str	r3, [r7, #116]	; 0x74
 8005d22:	2300      	movs	r3, #0
 8005d24:	673b      	str	r3, [r7, #112]	; 0x70
  char operation = ADD;
 8005d26:	232b      	movs	r3, #43	; 0x2b
 8005d28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  while (1)
  {
    /* USER CODE END WHILE */

	  // Reads characters from receive buffer and processes them
	  uint8_t key = key_buffer[key_processing_index];
 8005d2c:	4b63      	ldr	r3, [pc, #396]	; (8005ebc <main+0x1c0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a63      	ldr	r2, [pc, #396]	; (8005ec0 <main+0x1c4>)
 8005d32:	5cd3      	ldrb	r3, [r2, r3]
 8005d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	  // Only process characters if it isn't NULL
	  if (key != '\0')
 8005d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f5      	beq.n	8005d2c <main+0x30>
	  {
		  // Reset spot in buffer to NULL and increment index
		  key_buffer[key_processing_index] = '\0';
 8005d40:	4b5e      	ldr	r3, [pc, #376]	; (8005ebc <main+0x1c0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a5e      	ldr	r2, [pc, #376]	; (8005ec0 <main+0x1c4>)
 8005d46:	2100      	movs	r1, #0
 8005d48:	54d1      	strb	r1, [r2, r3]
		  key_processing_index = (key_processing_index >= (100 - 1)) ? 0 : key_processing_index + 1;
 8005d4a:	4b5c      	ldr	r3, [pc, #368]	; (8005ebc <main+0x1c0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b62      	cmp	r3, #98	; 0x62
 8005d50:	dc03      	bgt.n	8005d5a <main+0x5e>
 8005d52:	4b5a      	ldr	r3, [pc, #360]	; (8005ebc <main+0x1c0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3301      	adds	r3, #1
 8005d58:	e000      	b.n	8005d5c <main+0x60>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	4a57      	ldr	r2, [pc, #348]	; (8005ebc <main+0x1c0>)
 8005d5e:	6013      	str	r3, [r2, #0]

		  // Handle calculator input differently based on state
		  if (state == STATE_OP1)
 8005d60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d136      	bne.n	8005dd4 <main+0xd8>
		  {
			  // Add newest number to operand and print to terminal
			  if (is_key_number(key))
 8005d66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f9bd 	bl	80060ea <is_key_number>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d011      	beq.n	8005d9a <main+0x9e>
			  {
				  op1 = (op1 * 10) + (key - '0');
 8005d76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	461a      	mov	r2, r3
 8005d82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d86:	3b30      	subs	r3, #48	; 0x30
 8005d88:	4413      	add	r3, r2
 8005d8a:	67bb      	str	r3, [r7, #120]	; 0x78
				  CDC_Transmit_FS(&key, 1);
 8005d8c:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8005d90:	2101      	movs	r1, #1
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fbba 	bl	800650c <CDC_Transmit_FS>
 8005d98:	e7c8      	b.n	8005d2c <main+0x30>
			  }

			  // Set operation and change to entering second operand
			  else if ((key == ADD) || (key == SUBTRACT) || (key == MULTIPLY) || (key == DIVIDE))
 8005d9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d9e:	2b2b      	cmp	r3, #43	; 0x2b
 8005da0:	d00b      	beq.n	8005dba <main+0xbe>
 8005da2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005da6:	2b2d      	cmp	r3, #45	; 0x2d
 8005da8:	d007      	beq.n	8005dba <main+0xbe>
 8005daa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dae:	2b2a      	cmp	r3, #42	; 0x2a
 8005db0:	d003      	beq.n	8005dba <main+0xbe>
 8005db2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005db6:	2b2f      	cmp	r3, #47	; 0x2f
 8005db8:	d1b8      	bne.n	8005d2c <main+0x30>
			  {
				  operation = key;
 8005dba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				  CDC_Transmit_FS(&key, 1);
 8005dc2:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fb9f 	bl	800650c <CDC_Transmit_FS>
				  state = STATE_OP2;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dd2:	e7ab      	b.n	8005d2c <main+0x30>
			  }
		  }

		  else if (state == STATE_OP2)
 8005dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d1a8      	bne.n	8005d2c <main+0x30>
		  {
			  // Add newest number to operand and print to terminal
			  if (is_key_number(key))
 8005dda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f983 	bl	80060ea <is_key_number>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d011      	beq.n	8005e0e <main+0x112>
			  {
				  op2 = (op2 * 10) + (key - '0');
 8005dea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	461a      	mov	r2, r3
 8005df6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dfa:	3b30      	subs	r3, #48	; 0x30
 8005dfc:	4413      	add	r3, r2
 8005dfe:	677b      	str	r3, [r7, #116]	; 0x74
				  CDC_Transmit_FS(&key, 1);
 8005e00:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8005e04:	2101      	movs	r1, #1
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fb80 	bl	800650c <CDC_Transmit_FS>
 8005e0c:	e78e      	b.n	8005d2c <main+0x30>
			  }

			  // Pressing equals computes the result and prints it to the screen
			  else if (key == '=')
 8005e0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e12:	2b3d      	cmp	r3, #61	; 0x3d
 8005e14:	d18a      	bne.n	8005d2c <main+0x30>
			  {
				  // Compute the result
				  if (operation == ADD)
 8005e16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e1a:	2b2b      	cmp	r3, #43	; 0x2b
 8005e1c:	d104      	bne.n	8005e28 <main+0x12c>
				  {
					  result = op1 + op2;
 8005e1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e22:	4413      	add	r3, r2
 8005e24:	673b      	str	r3, [r7, #112]	; 0x70
 8005e26:	e01b      	b.n	8005e60 <main+0x164>
				  }
				  else if (operation == SUBTRACT)
 8005e28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e2c:	2b2d      	cmp	r3, #45	; 0x2d
 8005e2e:	d104      	bne.n	8005e3a <main+0x13e>
				  {
					  result = op1 - op2;
 8005e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	673b      	str	r3, [r7, #112]	; 0x70
 8005e38:	e012      	b.n	8005e60 <main+0x164>
				  }
				  else if (operation == MULTIPLY)
 8005e3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e40:	d105      	bne.n	8005e4e <main+0x152>
				  {
					  result = op1 * op2;
 8005e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e4c:	e008      	b.n	8005e60 <main+0x164>
				  }
				  else if (operation == DIVIDE)
 8005e4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e52:	2b2f      	cmp	r3, #47	; 0x2f
 8005e54:	d104      	bne.n	8005e60 <main+0x164>
				  {
					  result = op1 / op2;
 8005e56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e5e:	673b      	str	r3, [r7, #112]	; 0x70
				  }

				  // Define a buffer for the result and use sprintf() to format it
				  uint8_t result_print_buffer[100];
				  sprintf(result_print_buffer, "\r\n=%d\r\n", result);
 8005e60:	463b      	mov	r3, r7
 8005e62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e64:	4917      	ldr	r1, [pc, #92]	; (8005ec4 <main+0x1c8>)
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 f8b6 	bl	8006fd8 <siprintf>

				  // Determine the length of the buffer by counting to the first NULL character
				  uint32_t length = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	66bb      	str	r3, [r7, #104]	; 0x68
				  while (result_print_buffer[length] != '\0')
 8005e70:	e002      	b.n	8005e78 <main+0x17c>
				  {
					  length++;
 8005e72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e74:	3301      	adds	r3, #1
 8005e76:	66bb      	str	r3, [r7, #104]	; 0x68
				  while (result_print_buffer[length] != '\0')
 8005e78:	463a      	mov	r2, r7
 8005e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e7c:	4413      	add	r3, r2
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f6      	bne.n	8005e72 <main+0x176>
				  }

				  // If the result length is not 0, print the result
				  if (length > 0)
 8005e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <main+0x19e>
				  {
					  CDC_Transmit_FS(result_print_buffer, length);
 8005e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	463b      	mov	r3, r7
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fb3a 	bl	800650c <CDC_Transmit_FS>
 8005e98:	e003      	b.n	8005ea2 <main+0x1a6>
				  }
				  else
				  {
					  CDC_Transmit_FS("\r\nERROR\r\n", sizeof("\r\nERROR\r\n"));
 8005e9a:	210a      	movs	r1, #10
 8005e9c:	480a      	ldr	r0, [pc, #40]	; (8005ec8 <main+0x1cc>)
 8005e9e:	f000 fb35 	bl	800650c <CDC_Transmit_FS>
				  }

				  // Reset the operands and result, and then reset back to the first state
				  op1 = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	67bb      	str	r3, [r7, #120]	; 0x78
				  op2 = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	677b      	str	r3, [r7, #116]	; 0x74
				  result = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	673b      	str	r3, [r7, #112]	; 0x70
				  operation = ADD;
 8005eae:	232b      	movs	r3, #43	; 0x2b
 8005eb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				  state = STATE_OP1;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  {
 8005eb8:	e738      	b.n	8005d2c <main+0x30>
 8005eba:	bf00      	nop
 8005ebc:	20000204 	.word	0x20000204
 8005ec0:	20000218 	.word	0x20000218
 8005ec4:	0800768c 	.word	0x0800768c
 8005ec8:	08007694 	.word	0x08007694

08005ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b094      	sub	sp, #80	; 0x50
 8005ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ed2:	f107 0320 	add.w	r3, r7, #32
 8005ed6:	2230      	movs	r2, #48	; 0x30
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 ffbc 	bl	8006e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ee0:	f107 030c 	add.w	r3, r7, #12
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	60da      	str	r2, [r3, #12]
 8005eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <SystemClock_Config+0xd4>)
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	4a29      	ldr	r2, [pc, #164]	; (8005fa0 <SystemClock_Config+0xd4>)
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efe:	6413      	str	r3, [r2, #64]	; 0x40
 8005f00:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <SystemClock_Config+0xd4>)
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <SystemClock_Config+0xd8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005f18:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <SystemClock_Config+0xd8>)
 8005f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	4b20      	ldr	r3, [pc, #128]	; (8005fa4 <SystemClock_Config+0xd8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f28:	607b      	str	r3, [r7, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005f30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f36:	2301      	movs	r3, #1
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005f48:	2304      	movs	r3, #4
 8005f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005f4c:	2348      	movs	r3, #72	; 0x48
 8005f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005f50:	2304      	movs	r3, #4
 8005f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005f54:	2303      	movs	r3, #3
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f58:	f107 0320 	add.w	r3, r7, #32
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fb fffd 	bl	8001f5c <HAL_RCC_OscConfig>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8005f68:	f000 f8b8 	bl	80060dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f6c:	230f      	movs	r3, #15
 8005f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005f82:	f107 030c 	add.w	r3, r7, #12
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fc fa29 	bl	80023e0 <HAL_RCC_ClockConfig>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8005f94:	f000 f8a2 	bl	80060dc <Error_Handler>
  }
}
 8005f98:	bf00      	nop
 8005f9a:	3750      	adds	r7, #80	; 0x50
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	40007000 	.word	0x40007000

08005fa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005fac:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fae:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <MX_USART2_UART_Init+0x50>)
 8005fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005fb2:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005fba:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fce:	220c      	movs	r2, #12
 8005fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fde:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <MX_USART2_UART_Init+0x4c>)
 8005fe0:	f7fc fbec 	bl	80027bc <HAL_UART_Init>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005fea:	f000 f877 	bl	80060dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005fee:	bf00      	nop
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	2000027c 	.word	0x2000027c
 8005ff8:	40004400 	.word	0x40004400

08005ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006002:	f107 0314 	add.w	r3, r7, #20
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	605a      	str	r2, [r3, #4]
 800600c:	609a      	str	r2, [r3, #8]
 800600e:	60da      	str	r2, [r3, #12]
 8006010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	4b2d      	ldr	r3, [pc, #180]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	4a2c      	ldr	r2, [pc, #176]	; (80060cc <MX_GPIO_Init+0xd0>)
 800601c:	f043 0304 	orr.w	r3, r3, #4
 8006020:	6313      	str	r3, [r2, #48]	; 0x30
 8006022:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	4b26      	ldr	r3, [pc, #152]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	4a25      	ldr	r2, [pc, #148]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	6313      	str	r3, [r2, #48]	; 0x30
 800603e:	4b23      	ldr	r3, [pc, #140]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	4b1f      	ldr	r3, [pc, #124]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	6313      	str	r3, [r2, #48]	; 0x30
 800605a:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <MX_GPIO_Init+0xd0>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006066:	2300      	movs	r3, #0
 8006068:	607b      	str	r3, [r7, #4]
 800606a:	4b18      	ldr	r3, [pc, #96]	; (80060cc <MX_GPIO_Init+0xd0>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006070:	f043 0302 	orr.w	r3, r3, #2
 8006074:	6313      	str	r3, [r2, #48]	; 0x30
 8006076:	4b15      	ldr	r3, [pc, #84]	; (80060cc <MX_GPIO_Init+0xd0>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	607b      	str	r3, [r7, #4]
 8006080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006082:	2200      	movs	r2, #0
 8006084:	2120      	movs	r1, #32
 8006086:	4812      	ldr	r0, [pc, #72]	; (80060d0 <MX_GPIO_Init+0xd4>)
 8006088:	f7fa fdc4 	bl	8000c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800608c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <MX_GPIO_Init+0xd8>)
 8006094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800609a:	f107 0314 	add.w	r3, r7, #20
 800609e:	4619      	mov	r1, r3
 80060a0:	480d      	ldr	r0, [pc, #52]	; (80060d8 <MX_GPIO_Init+0xdc>)
 80060a2:	f7fa fc35 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80060a6:	2320      	movs	r3, #32
 80060a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060aa:	2301      	movs	r3, #1
 80060ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060b2:	2300      	movs	r3, #0
 80060b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80060b6:	f107 0314 	add.w	r3, r7, #20
 80060ba:	4619      	mov	r1, r3
 80060bc:	4804      	ldr	r0, [pc, #16]	; (80060d0 <MX_GPIO_Init+0xd4>)
 80060be:	f7fa fc27 	bl	8000910 <HAL_GPIO_Init>

}
 80060c2:	bf00      	nop
 80060c4:	3728      	adds	r7, #40	; 0x28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40020000 	.word	0x40020000
 80060d4:	10210000 	.word	0x10210000
 80060d8:	40020800 	.word	0x40020800

080060dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80060e0:	bf00      	nop
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <is_key_number>:
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

int is_key_number(uint8_t key)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	4603      	mov	r3, r0
 80060f2:	71fb      	strb	r3, [r7, #7]
	return ((key >= '0') && (key <= '9'));
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	2b2f      	cmp	r3, #47	; 0x2f
 80060f8:	d904      	bls.n	8006104 <is_key_number+0x1a>
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b39      	cmp	r3, #57	; 0x39
 80060fe:	d801      	bhi.n	8006104 <is_key_number+0x1a>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <is_key_number+0x1c>
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	607b      	str	r3, [r7, #4]
 800611e:	4b10      	ldr	r3, [pc, #64]	; (8006160 <HAL_MspInit+0x4c>)
 8006120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006122:	4a0f      	ldr	r2, [pc, #60]	; (8006160 <HAL_MspInit+0x4c>)
 8006124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006128:	6453      	str	r3, [r2, #68]	; 0x44
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <HAL_MspInit+0x4c>)
 800612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006132:	607b      	str	r3, [r7, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006136:	2300      	movs	r3, #0
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <HAL_MspInit+0x4c>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	4a08      	ldr	r2, [pc, #32]	; (8006160 <HAL_MspInit+0x4c>)
 8006140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006144:	6413      	str	r3, [r2, #64]	; 0x40
 8006146:	4b06      	ldr	r3, [pc, #24]	; (8006160 <HAL_MspInit+0x4c>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006152:	2007      	movs	r0, #7
 8006154:	f7fa fb78 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40023800 	.word	0x40023800

08006164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <HAL_UART_MspInit+0x94>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d133      	bne.n	80061ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006186:	2300      	movs	r3, #0
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <HAL_UART_MspInit+0x98>)
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <HAL_UART_MspInit+0x98>)
 8006190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006194:	6413      	str	r3, [r2, #64]	; 0x40
 8006196:	4b19      	ldr	r3, [pc, #100]	; (80061fc <HAL_UART_MspInit+0x98>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	4b15      	ldr	r3, [pc, #84]	; (80061fc <HAL_UART_MspInit+0x98>)
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	4a14      	ldr	r2, [pc, #80]	; (80061fc <HAL_UART_MspInit+0x98>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	6313      	str	r3, [r2, #48]	; 0x30
 80061b2:	4b12      	ldr	r3, [pc, #72]	; (80061fc <HAL_UART_MspInit+0x98>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80061be:	230c      	movs	r3, #12
 80061c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c2:	2302      	movs	r3, #2
 80061c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ca:	2300      	movs	r3, #0
 80061cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80061ce:	2307      	movs	r3, #7
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d2:	f107 0314 	add.w	r3, r7, #20
 80061d6:	4619      	mov	r1, r3
 80061d8:	4809      	ldr	r0, [pc, #36]	; (8006200 <HAL_UART_MspInit+0x9c>)
 80061da:	f7fa fb99 	bl	8000910 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	2026      	movs	r0, #38	; 0x26
 80061e4:	f7fa fb3b 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061e8:	2026      	movs	r0, #38	; 0x26
 80061ea:	f7fa fb54 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80061ee:	bf00      	nop
 80061f0:	3728      	adds	r7, #40	; 0x28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40004400 	.word	0x40004400
 80061fc:	40023800 	.word	0x40023800
 8006200:	40020000 	.word	0x40020000

08006204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006208:	bf00      	nop
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006216:	e7fe      	b.n	8006216 <HardFault_Handler+0x4>

08006218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800621c:	e7fe      	b.n	800621c <MemManage_Handler+0x4>

0800621e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800621e:	b480      	push	{r7}
 8006220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006222:	e7fe      	b.n	8006222 <BusFault_Handler+0x4>

08006224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006228:	e7fe      	b.n	8006228 <UsageFault_Handler+0x4>

0800622a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800622a:	b480      	push	{r7}
 800622c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800622e:	bf00      	nop
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800623c:	bf00      	nop
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006246:	b480      	push	{r7}
 8006248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800624a:	bf00      	nop
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006258:	f7fa f9e4 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800625c:	bf00      	nop
 800625e:	bd80      	pop	{r7, pc}

08006260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006264:	4802      	ldr	r0, [pc, #8]	; (8006270 <USART2_IRQHandler+0x10>)
 8006266:	f7fc faf7 	bl	8002858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800626a:	bf00      	nop
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	2000027c 	.word	0x2000027c

08006274 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006278:	4802      	ldr	r0, [pc, #8]	; (8006284 <OTG_FS_IRQHandler+0x10>)
 800627a:	f7fa fe34 	bl	8000ee6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800627e:	bf00      	nop
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20001558 	.word	0x20001558

08006288 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <_sbrk+0x50>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <_sbrk+0x16>
		heap_end = &end;
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <_sbrk+0x50>)
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <_sbrk+0x54>)
 800629c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <_sbrk+0x50>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <_sbrk+0x50>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4413      	add	r3, r2
 80062ac:	466a      	mov	r2, sp
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d907      	bls.n	80062c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80062b2:	f000 fd97 	bl	8006de4 <__errno>
 80062b6:	4602      	mov	r2, r0
 80062b8:	230c      	movs	r3, #12
 80062ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80062bc:	f04f 33ff 	mov.w	r3, #4294967295
 80062c0:	e006      	b.n	80062d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80062c2:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <_sbrk+0x50>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4413      	add	r3, r2
 80062ca:	4a03      	ldr	r2, [pc, #12]	; (80062d8 <_sbrk+0x50>)
 80062cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80062ce:	68fb      	ldr	r3, [r7, #12]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000208 	.word	0x20000208
 80062dc:	20001b68 	.word	0x20001b68

080062e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062e4:	4b16      	ldr	r3, [pc, #88]	; (8006340 <SystemInit+0x60>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	4a15      	ldr	r2, [pc, #84]	; (8006340 <SystemInit+0x60>)
 80062ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80062f4:	4b13      	ldr	r3, [pc, #76]	; (8006344 <SystemInit+0x64>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a12      	ldr	r2, [pc, #72]	; (8006344 <SystemInit+0x64>)
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006300:	4b10      	ldr	r3, [pc, #64]	; (8006344 <SystemInit+0x64>)
 8006302:	2200      	movs	r2, #0
 8006304:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006306:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <SystemInit+0x64>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <SystemInit+0x64>)
 800630c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006314:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <SystemInit+0x64>)
 8006318:	4a0b      	ldr	r2, [pc, #44]	; (8006348 <SystemInit+0x68>)
 800631a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800631c:	4b09      	ldr	r3, [pc, #36]	; (8006344 <SystemInit+0x64>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a08      	ldr	r2, [pc, #32]	; (8006344 <SystemInit+0x64>)
 8006322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006326:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <SystemInit+0x64>)
 800632a:	2200      	movs	r2, #0
 800632c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800632e:	4b04      	ldr	r3, [pc, #16]	; (8006340 <SystemInit+0x60>)
 8006330:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006334:	609a      	str	r2, [r3, #8]
#endif
}
 8006336:	bf00      	nop
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	e000ed00 	.word	0xe000ed00
 8006344:	40023800 	.word	0x40023800
 8006348:	24003010 	.word	0x24003010

0800634c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006350:	2200      	movs	r2, #0
 8006352:	4912      	ldr	r1, [pc, #72]	; (800639c <MX_USB_DEVICE_Init+0x50>)
 8006354:	4812      	ldr	r0, [pc, #72]	; (80063a0 <MX_USB_DEVICE_Init+0x54>)
 8006356:	f7fe fc77 	bl	8004c48 <USBD_Init>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006360:	f7ff febc 	bl	80060dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006364:	490f      	ldr	r1, [pc, #60]	; (80063a4 <MX_USB_DEVICE_Init+0x58>)
 8006366:	480e      	ldr	r0, [pc, #56]	; (80063a0 <MX_USB_DEVICE_Init+0x54>)
 8006368:	f7fe fc99 	bl	8004c9e <USBD_RegisterClass>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006372:	f7ff feb3 	bl	80060dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006376:	490c      	ldr	r1, [pc, #48]	; (80063a8 <MX_USB_DEVICE_Init+0x5c>)
 8006378:	4809      	ldr	r0, [pc, #36]	; (80063a0 <MX_USB_DEVICE_Init+0x54>)
 800637a:	f7fe fbc7 	bl	8004b0c <USBD_CDC_RegisterInterface>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006384:	f7ff feaa 	bl	80060dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006388:	4805      	ldr	r0, [pc, #20]	; (80063a0 <MX_USB_DEVICE_Init+0x54>)
 800638a:	f7fe fca2 	bl	8004cd2 <USBD_Start>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006394:	f7ff fea2 	bl	80060dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006398:	bf00      	nop
 800639a:	bd80      	pop	{r7, pc}
 800639c:	2000012c 	.word	0x2000012c
 80063a0:	200002bc 	.word	0x200002bc
 80063a4:	20000014 	.word	0x20000014
 80063a8:	2000011c 	.word	0x2000011c

080063ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063b0:	2200      	movs	r2, #0
 80063b2:	4905      	ldr	r1, [pc, #20]	; (80063c8 <CDC_Init_FS+0x1c>)
 80063b4:	4805      	ldr	r0, [pc, #20]	; (80063cc <CDC_Init_FS+0x20>)
 80063b6:	f7fe fbc0 	bl	8004b3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063ba:	4905      	ldr	r1, [pc, #20]	; (80063d0 <CDC_Init_FS+0x24>)
 80063bc:	4803      	ldr	r0, [pc, #12]	; (80063cc <CDC_Init_FS+0x20>)
 80063be:	f7fe fbd6 	bl	8004b6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20000d58 	.word	0x20000d58
 80063cc:	200002bc 	.word	0x200002bc
 80063d0:	20000558 	.word	0x20000558

080063d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80063d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80063da:	4618      	mov	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	6039      	str	r1, [r7, #0]
 80063ee:	71fb      	strb	r3, [r7, #7]
 80063f0:	4613      	mov	r3, r2
 80063f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	2b23      	cmp	r3, #35	; 0x23
 80063f8:	d84a      	bhi.n	8006490 <CDC_Control_FS+0xac>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <CDC_Control_FS+0x1c>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006491 	.word	0x08006491
 8006404:	08006491 	.word	0x08006491
 8006408:	08006491 	.word	0x08006491
 800640c:	08006491 	.word	0x08006491
 8006410:	08006491 	.word	0x08006491
 8006414:	08006491 	.word	0x08006491
 8006418:	08006491 	.word	0x08006491
 800641c:	08006491 	.word	0x08006491
 8006420:	08006491 	.word	0x08006491
 8006424:	08006491 	.word	0x08006491
 8006428:	08006491 	.word	0x08006491
 800642c:	08006491 	.word	0x08006491
 8006430:	08006491 	.word	0x08006491
 8006434:	08006491 	.word	0x08006491
 8006438:	08006491 	.word	0x08006491
 800643c:	08006491 	.word	0x08006491
 8006440:	08006491 	.word	0x08006491
 8006444:	08006491 	.word	0x08006491
 8006448:	08006491 	.word	0x08006491
 800644c:	08006491 	.word	0x08006491
 8006450:	08006491 	.word	0x08006491
 8006454:	08006491 	.word	0x08006491
 8006458:	08006491 	.word	0x08006491
 800645c:	08006491 	.word	0x08006491
 8006460:	08006491 	.word	0x08006491
 8006464:	08006491 	.word	0x08006491
 8006468:	08006491 	.word	0x08006491
 800646c:	08006491 	.word	0x08006491
 8006470:	08006491 	.word	0x08006491
 8006474:	08006491 	.word	0x08006491
 8006478:	08006491 	.word	0x08006491
 800647c:	08006491 	.word	0x08006491
 8006480:	08006491 	.word	0x08006491
 8006484:	08006491 	.word	0x08006491
 8006488:	08006491 	.word	0x08006491
 800648c:	08006491 	.word	0x08006491
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006490:	bf00      	nop
  }

  return (USBD_OK);
 8006492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	// Place incoming characters into buffer for processing in main()
	for (int i = 0; i < *Len; i++)
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e015      	b.n	80064dc <CDC_Receive_FS+0x3c>
	{
		key_buffer[key_receive_index] = Buf[i];
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	441a      	add	r2, r3
 80064b6:	4b12      	ldr	r3, [pc, #72]	; (8006500 <CDC_Receive_FS+0x60>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	7811      	ldrb	r1, [r2, #0]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <CDC_Receive_FS+0x64>)
 80064be:	54d1      	strb	r1, [r2, r3]

		// Increment index to receive next character
		key_receive_index = (key_receive_index >= (100 - 1)) ? 0 : key_receive_index + 1;
 80064c0:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <CDC_Receive_FS+0x60>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b62      	cmp	r3, #98	; 0x62
 80064c6:	dc03      	bgt.n	80064d0 <CDC_Receive_FS+0x30>
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <CDC_Receive_FS+0x60>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	e000      	b.n	80064d2 <CDC_Receive_FS+0x32>
 80064d0:	2300      	movs	r3, #0
 80064d2:	4a0b      	ldr	r2, [pc, #44]	; (8006500 <CDC_Receive_FS+0x60>)
 80064d4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d8e4      	bhi.n	80064b0 <CDC_Receive_FS+0x10>
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4807      	ldr	r0, [pc, #28]	; (8006508 <CDC_Receive_FS+0x68>)
 80064ea:	f7fe fb40 	bl	8004b6e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064ee:	4806      	ldr	r0, [pc, #24]	; (8006508 <CDC_Receive_FS+0x68>)
 80064f0:	f7fe fb80 	bl	8004bf4 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80064f4:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000200 	.word	0x20000200
 8006504:	20000218 	.word	0x20000218
 8006508:	200002bc 	.word	0x200002bc

0800650c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800651c:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <CDC_Transmit_FS+0x48>)
 800651e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006522:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800652e:	2301      	movs	r3, #1
 8006530:	e00b      	b.n	800654a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006532:	887b      	ldrh	r3, [r7, #2]
 8006534:	461a      	mov	r2, r3
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	4806      	ldr	r0, [pc, #24]	; (8006554 <CDC_Transmit_FS+0x48>)
 800653a:	f7fe fafe 	bl	8004b3a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800653e:	4805      	ldr	r0, [pc, #20]	; (8006554 <CDC_Transmit_FS+0x48>)
 8006540:	f7fe fb29 	bl	8004b96 <USBD_CDC_TransmitPacket>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200002bc 	.word	0x200002bc

08006558 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006560:	f107 0314 	add.w	r3, r7, #20
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	605a      	str	r2, [r3, #4]
 800656a:	609a      	str	r2, [r3, #8]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006578:	d147      	bne.n	800660a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <HAL_PCD_MspInit+0xbc>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	4a24      	ldr	r2, [pc, #144]	; (8006614 <HAL_PCD_MspInit+0xbc>)
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	6313      	str	r3, [r2, #48]	; 0x30
 800658a:	4b22      	ldr	r3, [pc, #136]	; (8006614 <HAL_PCD_MspInit+0xbc>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800659a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800659c:	2300      	movs	r3, #0
 800659e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a4:	f107 0314 	add.w	r3, r7, #20
 80065a8:	4619      	mov	r1, r3
 80065aa:	481b      	ldr	r0, [pc, #108]	; (8006618 <HAL_PCD_MspInit+0xc0>)
 80065ac:	f7fa f9b0 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80065b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80065b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b6:	2302      	movs	r3, #2
 80065b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065be:	2303      	movs	r3, #3
 80065c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80065c2:	230a      	movs	r3, #10
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	4619      	mov	r1, r3
 80065cc:	4812      	ldr	r0, [pc, #72]	; (8006618 <HAL_PCD_MspInit+0xc0>)
 80065ce:	f7fa f99f 	bl	8000910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <HAL_PCD_MspInit+0xbc>)
 80065d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d6:	4a0f      	ldr	r2, [pc, #60]	; (8006614 <HAL_PCD_MspInit+0xbc>)
 80065d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065dc:	6353      	str	r3, [r2, #52]	; 0x34
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <HAL_PCD_MspInit+0xbc>)
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	4a0b      	ldr	r2, [pc, #44]	; (8006614 <HAL_PCD_MspInit+0xbc>)
 80065e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065ec:	6453      	str	r3, [r2, #68]	; 0x44
 80065ee:	4b09      	ldr	r3, [pc, #36]	; (8006614 <HAL_PCD_MspInit+0xbc>)
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80065fa:	2200      	movs	r2, #0
 80065fc:	2100      	movs	r1, #0
 80065fe:	2043      	movs	r0, #67	; 0x43
 8006600:	f7fa f92d 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006604:	2043      	movs	r0, #67	; 0x43
 8006606:	f7fa f946 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800660a:	bf00      	nop
 800660c:	3728      	adds	r7, #40	; 0x28
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40023800 	.word	0x40023800
 8006618:	40020000 	.word	0x40020000

0800661c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f7fe fb96 	bl	8004d64 <USBD_LL_SetupStage>
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	4619      	mov	r1, r3
 800666a:	f7fe fbc6 	bl	8004dfa <USBD_LL_DataOutStage>
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	460b      	mov	r3, r1
 8006680:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006688:	78fa      	ldrb	r2, [r7, #3]
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	3348      	adds	r3, #72	; 0x48
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	4619      	mov	r1, r3
 800669e:	f7fe fc1d 	bl	8004edc <USBD_LL_DataInStage>
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe fd2b 	bl	8005114 <USBD_LL_SOF>
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066ce:	2301      	movs	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]
 80066de:	e008      	b.n	80066f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d102      	bne.n	80066ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80066e8:	2301      	movs	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	e001      	b.n	80066f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80066ee:	f7ff fcf5 	bl	80060dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066f8:	7bfa      	ldrb	r2, [r7, #15]
 80066fa:	4611      	mov	r1, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe fcd3 	bl	80050a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fc8c 	bl	8005026 <USBD_LL_Reset>
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fcce 	bl	80050c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6812      	ldr	r2, [r2, #0]
 800673a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800674c:	4b04      	ldr	r3, [pc, #16]	; (8006760 <HAL_PCD_SuspendCallback+0x48>)
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	4a03      	ldr	r2, [pc, #12]	; (8006760 <HAL_PCD_SuspendCallback+0x48>)
 8006752:	f043 0306 	orr.w	r3, r3, #6
 8006756:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	e000ed00 	.word	0xe000ed00

08006764 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fcbd 	bl	80050f2 <USBD_LL_Resume>
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006792:	78fa      	ldrb	r2, [r7, #3]
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fce3 	bl	8005162 <USBD_LL_IsoOUTIncomplete>
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fcc4 	bl	8005148 <USBD_LL_IsoINIncomplete>
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe fcd0 	bl	800517c <USBD_LL_DevConnected>
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fccd 	bl	8005192 <USBD_LL_DevDisconnected>
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d13c      	bne.n	800688a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006810:	4a20      	ldr	r2, [pc, #128]	; (8006894 <USBD_LL_Init+0x94>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a1e      	ldr	r2, [pc, #120]	; (8006894 <USBD_LL_Init+0x94>)
 800681c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006820:	4b1c      	ldr	r3, [pc, #112]	; (8006894 <USBD_LL_Init+0x94>)
 8006822:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006826:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006828:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <USBD_LL_Init+0x94>)
 800682a:	2204      	movs	r2, #4
 800682c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800682e:	4b19      	ldr	r3, [pc, #100]	; (8006894 <USBD_LL_Init+0x94>)
 8006830:	2202      	movs	r2, #2
 8006832:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006834:	4b17      	ldr	r3, [pc, #92]	; (8006894 <USBD_LL_Init+0x94>)
 8006836:	2200      	movs	r2, #0
 8006838:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800683a:	4b16      	ldr	r3, [pc, #88]	; (8006894 <USBD_LL_Init+0x94>)
 800683c:	2202      	movs	r2, #2
 800683e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006840:	4b14      	ldr	r3, [pc, #80]	; (8006894 <USBD_LL_Init+0x94>)
 8006842:	2200      	movs	r2, #0
 8006844:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006846:	4b13      	ldr	r3, [pc, #76]	; (8006894 <USBD_LL_Init+0x94>)
 8006848:	2200      	movs	r2, #0
 800684a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800684c:	4b11      	ldr	r3, [pc, #68]	; (8006894 <USBD_LL_Init+0x94>)
 800684e:	2200      	movs	r2, #0
 8006850:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <USBD_LL_Init+0x94>)
 8006854:	2201      	movs	r2, #1
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006858:	4b0e      	ldr	r3, [pc, #56]	; (8006894 <USBD_LL_Init+0x94>)
 800685a:	2200      	movs	r2, #0
 800685c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800685e:	480d      	ldr	r0, [pc, #52]	; (8006894 <USBD_LL_Init+0x94>)
 8006860:	f7fa f9f1 	bl	8000c46 <HAL_PCD_Init>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800686a:	f7ff fc37 	bl	80060dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800686e:	2180      	movs	r1, #128	; 0x80
 8006870:	4808      	ldr	r0, [pc, #32]	; (8006894 <USBD_LL_Init+0x94>)
 8006872:	f7fb fb56 	bl	8001f22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006876:	2240      	movs	r2, #64	; 0x40
 8006878:	2100      	movs	r1, #0
 800687a:	4806      	ldr	r0, [pc, #24]	; (8006894 <USBD_LL_Init+0x94>)
 800687c:	f7fb fb0a 	bl	8001e94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006880:	2280      	movs	r2, #128	; 0x80
 8006882:	2101      	movs	r1, #1
 8006884:	4803      	ldr	r0, [pc, #12]	; (8006894 <USBD_LL_Init+0x94>)
 8006886:	f7fb fb05 	bl	8001e94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20001558 	.word	0x20001558

08006898 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fa fae6 	bl	8000e80 <HAL_PCD_Start>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f92e 	bl	8006b1c <USBD_Get_USB_Status>
 80068c0:	4603      	mov	r3, r0
 80068c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	4608      	mov	r0, r1
 80068d8:	4611      	mov	r1, r2
 80068da:	461a      	mov	r2, r3
 80068dc:	4603      	mov	r3, r0
 80068de:	70fb      	strb	r3, [r7, #3]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70bb      	strb	r3, [r7, #2]
 80068e4:	4613      	mov	r3, r2
 80068e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80068f6:	78bb      	ldrb	r3, [r7, #2]
 80068f8:	883a      	ldrh	r2, [r7, #0]
 80068fa:	78f9      	ldrb	r1, [r7, #3]
 80068fc:	f7fa febb 	bl	8001676 <HAL_PCD_EP_Open>
 8006900:	4603      	mov	r3, r0
 8006902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f908 	bl	8006b1c <USBD_Get_USB_Status>
 800690c:	4603      	mov	r3, r0
 800690e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006910:	7bbb      	ldrb	r3, [r7, #14]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006934:	78fa      	ldrb	r2, [r7, #3]
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f7fa ff04 	bl	8001746 <HAL_PCD_EP_Close>
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f8e9 	bl	8006b1c <USBD_Get_USB_Status>
 800694a:	4603      	mov	r3, r0
 800694c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800694e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7fa ffdc 	bl	8001934 <HAL_PCD_EP_SetStall>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	4618      	mov	r0, r3
 8006984:	f000 f8ca 	bl	8006b1c <USBD_Get_USB_Status>
 8006988:	4603      	mov	r3, r0
 800698a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800698c:	7bbb      	ldrb	r3, [r7, #14]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fb f821 	bl	80019fc <HAL_PCD_EP_ClrStall>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 f8ab 	bl	8006b1c <USBD_Get_USB_Status>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80069e6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80069e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	da0b      	bge.n	8006a08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	4613      	mov	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	333e      	adds	r3, #62	; 0x3e
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	e00b      	b.n	8006a20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fa fdee 	bl	800162c <HAL_PCD_SetAddress>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f860 	bl	8006b1c <USBD_Get_USB_Status>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b086      	sub	sp, #24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	461a      	mov	r2, r3
 8006a76:	460b      	mov	r3, r1
 8006a78:	72fb      	strb	r3, [r7, #11]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006a8c:	893b      	ldrh	r3, [r7, #8]
 8006a8e:	7af9      	ldrb	r1, [r7, #11]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	f7fa ff05 	bl	80018a0 <HAL_PCD_EP_Transmit>
 8006a96:	4603      	mov	r3, r0
 8006a98:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 f83d 	bl	8006b1c <USBD_Get_USB_Status>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006aa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	461a      	mov	r2, r3
 8006abc:	460b      	mov	r3, r1
 8006abe:	72fb      	strb	r3, [r7, #11]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006ad2:	893b      	ldrh	r3, [r7, #8]
 8006ad4:	7af9      	ldrb	r1, [r7, #11]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	f7fa fe7f 	bl	80017da <HAL_PCD_EP_Receive>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 f81a 	bl	8006b1c <USBD_Get_USB_Status>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006aec:	7dbb      	ldrb	r3, [r7, #22]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fa feaf 	bl	8001870 <HAL_PCD_EP_GetRxCount>
 8006b12:	4603      	mov	r3, r0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	4603      	mov	r3, r0
 8006b24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d817      	bhi.n	8006b60 <USBD_Get_USB_Status+0x44>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <USBD_Get_USB_Status+0x1c>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b4f 	.word	0x08006b4f
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b5b 	.word	0x08006b5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b4c:	e00b      	b.n	8006b66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	73fb      	strb	r3, [r7, #15]
    break;
 8006b52:	e008      	b.n	8006b66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73fb      	strb	r3, [r7, #15]
    break;
 8006b58:	e005      	b.n	8006b66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b5e:	e002      	b.n	8006b66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b60:	2302      	movs	r3, #2
 8006b62:	73fb      	strb	r3, [r7, #15]
    break;
 8006b64:	bf00      	nop
  }
  return usb_status;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	6039      	str	r1, [r7, #0]
 8006b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2212      	movs	r2, #18
 8006b84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b86:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20000148 	.word	0x20000148

08006b98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	6039      	str	r1, [r7, #0]
 8006ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006baa:	4b03      	ldr	r3, [pc, #12]	; (8006bb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	2000015c 	.word	0x2000015c

08006bbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4907      	ldr	r1, [pc, #28]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bd2:	4808      	ldr	r0, [pc, #32]	; (8006bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bd4:	f7fe ffb4 	bl	8005b40 <USBD_GetString>
 8006bd8:	e004      	b.n	8006be4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bde:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006be0:	f7fe ffae 	bl	8005b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20001960 	.word	0x20001960
 8006bf4:	080076a0 	.word	0x080076a0

08006bf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	4904      	ldr	r1, [pc, #16]	; (8006c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c08:	4804      	ldr	r0, [pc, #16]	; (8006c1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c0a:	f7fe ff99 	bl	8005b40 <USBD_GetString>
  return USBD_StrDesc;
 8006c0e:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20001960 	.word	0x20001960
 8006c1c:	080076b8 	.word	0x080076b8

08006c20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	6039      	str	r1, [r7, #0]
 8006c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	221a      	movs	r2, #26
 8006c30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c32:	f000 f843 	bl	8006cbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c36:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000160 	.word	0x20000160

08006c44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d105      	bne.n	8006c62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	4907      	ldr	r1, [pc, #28]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c5a:	4808      	ldr	r0, [pc, #32]	; (8006c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c5c:	f7fe ff70 	bl	8005b40 <USBD_GetString>
 8006c60:	e004      	b.n	8006c6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	4904      	ldr	r1, [pc, #16]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c66:	4805      	ldr	r0, [pc, #20]	; (8006c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c68:	f7fe ff6a 	bl	8005b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c6c:	4b02      	ldr	r3, [pc, #8]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20001960 	.word	0x20001960
 8006c7c:	080076cc 	.word	0x080076cc

08006c80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4907      	ldr	r1, [pc, #28]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c96:	4808      	ldr	r0, [pc, #32]	; (8006cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c98:	f7fe ff52 	bl	8005b40 <USBD_GetString>
 8006c9c:	e004      	b.n	8006ca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4904      	ldr	r1, [pc, #16]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ca2:	4805      	ldr	r0, [pc, #20]	; (8006cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ca4:	f7fe ff4c 	bl	8005b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20001960 	.word	0x20001960
 8006cb8:	080076d8 	.word	0x080076d8

08006cbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <Get_SerialNum+0x44>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <Get_SerialNum+0x48>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cce:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <Get_SerialNum+0x4c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ce2:	2208      	movs	r2, #8
 8006ce4:	4909      	ldr	r1, [pc, #36]	; (8006d0c <Get_SerialNum+0x50>)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f814 	bl	8006d14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cec:	2204      	movs	r2, #4
 8006cee:	4908      	ldr	r1, [pc, #32]	; (8006d10 <Get_SerialNum+0x54>)
 8006cf0:	68b8      	ldr	r0, [r7, #8]
 8006cf2:	f000 f80f 	bl	8006d14 <IntToUnicode>
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	1fff7a10 	.word	0x1fff7a10
 8006d04:	1fff7a14 	.word	0x1fff7a14
 8006d08:	1fff7a18 	.word	0x1fff7a18
 8006d0c:	20000162 	.word	0x20000162
 8006d10:	20000172 	.word	0x20000172

08006d14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
 8006d2a:	e027      	b.n	8006d7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	0f1b      	lsrs	r3, r3, #28
 8006d30:	2b09      	cmp	r3, #9
 8006d32:	d80b      	bhi.n	8006d4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	0f1b      	lsrs	r3, r3, #28
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	440b      	add	r3, r1
 8006d44:	3230      	adds	r2, #48	; 0x30
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e00a      	b.n	8006d62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	0f1b      	lsrs	r3, r3, #28
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4619      	mov	r1, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3237      	adds	r2, #55	; 0x37
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
 8006d7c:	7dfa      	ldrb	r2, [r7, #23]
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3d3      	bcc.n	8006d2c <IntToUnicode+0x18>
  }
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006d94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006d96:	e003      	b.n	8006da0 <LoopCopyDataInit>

08006d98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006d9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006d9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006d9e:	3104      	adds	r1, #4

08006da0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006da0:	480b      	ldr	r0, [pc, #44]	; (8006dd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006da4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006da6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006da8:	d3f6      	bcc.n	8006d98 <CopyDataInit>
  ldr  r2, =_sbss
 8006daa:	4a0b      	ldr	r2, [pc, #44]	; (8006dd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006dac:	e002      	b.n	8006db4 <LoopFillZerobss>

08006dae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006dae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006db0:	f842 3b04 	str.w	r3, [r2], #4

08006db4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006db4:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006db6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006db8:	d3f9      	bcc.n	8006dae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006dba:	f7ff fa91 	bl	80062e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006dbe:	f000 f817 	bl	8006df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006dc2:	f7fe ff9b 	bl	8005cfc <main>
  bx  lr    
 8006dc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006dc8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8006dcc:	08007744 	.word	0x08007744
  ldr  r0, =_sdata
 8006dd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006dd4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8006dd8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006ddc:	20001b64 	.word	0x20001b64

08006de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006de0:	e7fe      	b.n	8006de0 <ADC_IRQHandler>
	...

08006de4 <__errno>:
 8006de4:	4b01      	ldr	r3, [pc, #4]	; (8006dec <__errno+0x8>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	2000017c 	.word	0x2000017c

08006df0 <__libc_init_array>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	4e0d      	ldr	r6, [pc, #52]	; (8006e28 <__libc_init_array+0x38>)
 8006df4:	4c0d      	ldr	r4, [pc, #52]	; (8006e2c <__libc_init_array+0x3c>)
 8006df6:	1ba4      	subs	r4, r4, r6
 8006df8:	10a4      	asrs	r4, r4, #2
 8006dfa:	2500      	movs	r5, #0
 8006dfc:	42a5      	cmp	r5, r4
 8006dfe:	d109      	bne.n	8006e14 <__libc_init_array+0x24>
 8006e00:	4e0b      	ldr	r6, [pc, #44]	; (8006e30 <__libc_init_array+0x40>)
 8006e02:	4c0c      	ldr	r4, [pc, #48]	; (8006e34 <__libc_init_array+0x44>)
 8006e04:	f000 fc36 	bl	8007674 <_init>
 8006e08:	1ba4      	subs	r4, r4, r6
 8006e0a:	10a4      	asrs	r4, r4, #2
 8006e0c:	2500      	movs	r5, #0
 8006e0e:	42a5      	cmp	r5, r4
 8006e10:	d105      	bne.n	8006e1e <__libc_init_array+0x2e>
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e18:	4798      	blx	r3
 8006e1a:	3501      	adds	r5, #1
 8006e1c:	e7ee      	b.n	8006dfc <__libc_init_array+0xc>
 8006e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e22:	4798      	blx	r3
 8006e24:	3501      	adds	r5, #1
 8006e26:	e7f2      	b.n	8006e0e <__libc_init_array+0x1e>
 8006e28:	0800773c 	.word	0x0800773c
 8006e2c:	0800773c 	.word	0x0800773c
 8006e30:	0800773c 	.word	0x0800773c
 8006e34:	08007740 	.word	0x08007740

08006e38 <malloc>:
 8006e38:	4b02      	ldr	r3, [pc, #8]	; (8006e44 <malloc+0xc>)
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	f000 b861 	b.w	8006f04 <_malloc_r>
 8006e42:	bf00      	nop
 8006e44:	2000017c 	.word	0x2000017c

08006e48 <free>:
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <free+0xc>)
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f000 b80b 	b.w	8006e68 <_free_r>
 8006e52:	bf00      	nop
 8006e54:	2000017c 	.word	0x2000017c

08006e58 <memset>:
 8006e58:	4402      	add	r2, r0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d100      	bne.n	8006e62 <memset+0xa>
 8006e60:	4770      	bx	lr
 8006e62:	f803 1b01 	strb.w	r1, [r3], #1
 8006e66:	e7f9      	b.n	8006e5c <memset+0x4>

08006e68 <_free_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	d045      	beq.n	8006efc <_free_r+0x94>
 8006e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e74:	1f0c      	subs	r4, r1, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bfb8      	it	lt
 8006e7a:	18e4      	addlt	r4, r4, r3
 8006e7c:	f000 f8cc 	bl	8007018 <__malloc_lock>
 8006e80:	4a1f      	ldr	r2, [pc, #124]	; (8006f00 <_free_r+0x98>)
 8006e82:	6813      	ldr	r3, [r2, #0]
 8006e84:	4610      	mov	r0, r2
 8006e86:	b933      	cbnz	r3, 8006e96 <_free_r+0x2e>
 8006e88:	6063      	str	r3, [r4, #4]
 8006e8a:	6014      	str	r4, [r2, #0]
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e92:	f000 b8c2 	b.w	800701a <__malloc_unlock>
 8006e96:	42a3      	cmp	r3, r4
 8006e98:	d90c      	bls.n	8006eb4 <_free_r+0x4c>
 8006e9a:	6821      	ldr	r1, [r4, #0]
 8006e9c:	1862      	adds	r2, r4, r1
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	bf04      	itt	eq
 8006ea2:	681a      	ldreq	r2, [r3, #0]
 8006ea4:	685b      	ldreq	r3, [r3, #4]
 8006ea6:	6063      	str	r3, [r4, #4]
 8006ea8:	bf04      	itt	eq
 8006eaa:	1852      	addeq	r2, r2, r1
 8006eac:	6022      	streq	r2, [r4, #0]
 8006eae:	6004      	str	r4, [r0, #0]
 8006eb0:	e7ec      	b.n	8006e8c <_free_r+0x24>
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	b10a      	cbz	r2, 8006ebc <_free_r+0x54>
 8006eb8:	42a2      	cmp	r2, r4
 8006eba:	d9fa      	bls.n	8006eb2 <_free_r+0x4a>
 8006ebc:	6819      	ldr	r1, [r3, #0]
 8006ebe:	1858      	adds	r0, r3, r1
 8006ec0:	42a0      	cmp	r0, r4
 8006ec2:	d10b      	bne.n	8006edc <_free_r+0x74>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	4401      	add	r1, r0
 8006ec8:	1858      	adds	r0, r3, r1
 8006eca:	4282      	cmp	r2, r0
 8006ecc:	6019      	str	r1, [r3, #0]
 8006ece:	d1dd      	bne.n	8006e8c <_free_r+0x24>
 8006ed0:	6810      	ldr	r0, [r2, #0]
 8006ed2:	6852      	ldr	r2, [r2, #4]
 8006ed4:	605a      	str	r2, [r3, #4]
 8006ed6:	4401      	add	r1, r0
 8006ed8:	6019      	str	r1, [r3, #0]
 8006eda:	e7d7      	b.n	8006e8c <_free_r+0x24>
 8006edc:	d902      	bls.n	8006ee4 <_free_r+0x7c>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	602b      	str	r3, [r5, #0]
 8006ee2:	e7d3      	b.n	8006e8c <_free_r+0x24>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	1821      	adds	r1, r4, r0
 8006ee8:	428a      	cmp	r2, r1
 8006eea:	bf04      	itt	eq
 8006eec:	6811      	ldreq	r1, [r2, #0]
 8006eee:	6852      	ldreq	r2, [r2, #4]
 8006ef0:	6062      	str	r2, [r4, #4]
 8006ef2:	bf04      	itt	eq
 8006ef4:	1809      	addeq	r1, r1, r0
 8006ef6:	6021      	streq	r1, [r4, #0]
 8006ef8:	605c      	str	r4, [r3, #4]
 8006efa:	e7c7      	b.n	8006e8c <_free_r+0x24>
 8006efc:	bd38      	pop	{r3, r4, r5, pc}
 8006efe:	bf00      	nop
 8006f00:	2000020c 	.word	0x2000020c

08006f04 <_malloc_r>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	1ccd      	adds	r5, r1, #3
 8006f08:	f025 0503 	bic.w	r5, r5, #3
 8006f0c:	3508      	adds	r5, #8
 8006f0e:	2d0c      	cmp	r5, #12
 8006f10:	bf38      	it	cc
 8006f12:	250c      	movcc	r5, #12
 8006f14:	2d00      	cmp	r5, #0
 8006f16:	4606      	mov	r6, r0
 8006f18:	db01      	blt.n	8006f1e <_malloc_r+0x1a>
 8006f1a:	42a9      	cmp	r1, r5
 8006f1c:	d903      	bls.n	8006f26 <_malloc_r+0x22>
 8006f1e:	230c      	movs	r3, #12
 8006f20:	6033      	str	r3, [r6, #0]
 8006f22:	2000      	movs	r0, #0
 8006f24:	bd70      	pop	{r4, r5, r6, pc}
 8006f26:	f000 f877 	bl	8007018 <__malloc_lock>
 8006f2a:	4a21      	ldr	r2, [pc, #132]	; (8006fb0 <_malloc_r+0xac>)
 8006f2c:	6814      	ldr	r4, [r2, #0]
 8006f2e:	4621      	mov	r1, r4
 8006f30:	b991      	cbnz	r1, 8006f58 <_malloc_r+0x54>
 8006f32:	4c20      	ldr	r4, [pc, #128]	; (8006fb4 <_malloc_r+0xb0>)
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	b91b      	cbnz	r3, 8006f40 <_malloc_r+0x3c>
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f000 f83d 	bl	8006fb8 <_sbrk_r>
 8006f3e:	6020      	str	r0, [r4, #0]
 8006f40:	4629      	mov	r1, r5
 8006f42:	4630      	mov	r0, r6
 8006f44:	f000 f838 	bl	8006fb8 <_sbrk_r>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d124      	bne.n	8006f96 <_malloc_r+0x92>
 8006f4c:	230c      	movs	r3, #12
 8006f4e:	6033      	str	r3, [r6, #0]
 8006f50:	4630      	mov	r0, r6
 8006f52:	f000 f862 	bl	800701a <__malloc_unlock>
 8006f56:	e7e4      	b.n	8006f22 <_malloc_r+0x1e>
 8006f58:	680b      	ldr	r3, [r1, #0]
 8006f5a:	1b5b      	subs	r3, r3, r5
 8006f5c:	d418      	bmi.n	8006f90 <_malloc_r+0x8c>
 8006f5e:	2b0b      	cmp	r3, #11
 8006f60:	d90f      	bls.n	8006f82 <_malloc_r+0x7e>
 8006f62:	600b      	str	r3, [r1, #0]
 8006f64:	50cd      	str	r5, [r1, r3]
 8006f66:	18cc      	adds	r4, r1, r3
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f000 f856 	bl	800701a <__malloc_unlock>
 8006f6e:	f104 000b 	add.w	r0, r4, #11
 8006f72:	1d23      	adds	r3, r4, #4
 8006f74:	f020 0007 	bic.w	r0, r0, #7
 8006f78:	1ac3      	subs	r3, r0, r3
 8006f7a:	d0d3      	beq.n	8006f24 <_malloc_r+0x20>
 8006f7c:	425a      	negs	r2, r3
 8006f7e:	50e2      	str	r2, [r4, r3]
 8006f80:	e7d0      	b.n	8006f24 <_malloc_r+0x20>
 8006f82:	428c      	cmp	r4, r1
 8006f84:	684b      	ldr	r3, [r1, #4]
 8006f86:	bf16      	itet	ne
 8006f88:	6063      	strne	r3, [r4, #4]
 8006f8a:	6013      	streq	r3, [r2, #0]
 8006f8c:	460c      	movne	r4, r1
 8006f8e:	e7eb      	b.n	8006f68 <_malloc_r+0x64>
 8006f90:	460c      	mov	r4, r1
 8006f92:	6849      	ldr	r1, [r1, #4]
 8006f94:	e7cc      	b.n	8006f30 <_malloc_r+0x2c>
 8006f96:	1cc4      	adds	r4, r0, #3
 8006f98:	f024 0403 	bic.w	r4, r4, #3
 8006f9c:	42a0      	cmp	r0, r4
 8006f9e:	d005      	beq.n	8006fac <_malloc_r+0xa8>
 8006fa0:	1a21      	subs	r1, r4, r0
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f000 f808 	bl	8006fb8 <_sbrk_r>
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d0cf      	beq.n	8006f4c <_malloc_r+0x48>
 8006fac:	6025      	str	r5, [r4, #0]
 8006fae:	e7db      	b.n	8006f68 <_malloc_r+0x64>
 8006fb0:	2000020c 	.word	0x2000020c
 8006fb4:	20000210 	.word	0x20000210

08006fb8 <_sbrk_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4c06      	ldr	r4, [pc, #24]	; (8006fd4 <_sbrk_r+0x1c>)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	f7ff f960 	bl	8006288 <_sbrk>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_sbrk_r+0x1a>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_sbrk_r+0x1a>
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	20001b60 	.word	0x20001b60

08006fd8 <siprintf>:
 8006fd8:	b40e      	push	{r1, r2, r3}
 8006fda:	b500      	push	{lr}
 8006fdc:	b09c      	sub	sp, #112	; 0x70
 8006fde:	ab1d      	add	r3, sp, #116	; 0x74
 8006fe0:	9002      	str	r0, [sp, #8]
 8006fe2:	9006      	str	r0, [sp, #24]
 8006fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fe8:	4809      	ldr	r0, [pc, #36]	; (8007010 <siprintf+0x38>)
 8006fea:	9107      	str	r1, [sp, #28]
 8006fec:	9104      	str	r1, [sp, #16]
 8006fee:	4909      	ldr	r1, [pc, #36]	; (8007014 <siprintf+0x3c>)
 8006ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff4:	9105      	str	r1, [sp, #20]
 8006ff6:	6800      	ldr	r0, [r0, #0]
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	a902      	add	r1, sp, #8
 8006ffc:	f000 f868 	bl	80070d0 <_svfiprintf_r>
 8007000:	9b02      	ldr	r3, [sp, #8]
 8007002:	2200      	movs	r2, #0
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	b01c      	add	sp, #112	; 0x70
 8007008:	f85d eb04 	ldr.w	lr, [sp], #4
 800700c:	b003      	add	sp, #12
 800700e:	4770      	bx	lr
 8007010:	2000017c 	.word	0x2000017c
 8007014:	ffff0208 	.word	0xffff0208

08007018 <__malloc_lock>:
 8007018:	4770      	bx	lr

0800701a <__malloc_unlock>:
 800701a:	4770      	bx	lr

0800701c <__ssputs_r>:
 800701c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	688e      	ldr	r6, [r1, #8]
 8007022:	429e      	cmp	r6, r3
 8007024:	4682      	mov	sl, r0
 8007026:	460c      	mov	r4, r1
 8007028:	4690      	mov	r8, r2
 800702a:	4699      	mov	r9, r3
 800702c:	d837      	bhi.n	800709e <__ssputs_r+0x82>
 800702e:	898a      	ldrh	r2, [r1, #12]
 8007030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007034:	d031      	beq.n	800709a <__ssputs_r+0x7e>
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	6909      	ldr	r1, [r1, #16]
 800703a:	1a6f      	subs	r7, r5, r1
 800703c:	6965      	ldr	r5, [r4, #20]
 800703e:	2302      	movs	r3, #2
 8007040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007044:	fb95 f5f3 	sdiv	r5, r5, r3
 8007048:	f109 0301 	add.w	r3, r9, #1
 800704c:	443b      	add	r3, r7
 800704e:	429d      	cmp	r5, r3
 8007050:	bf38      	it	cc
 8007052:	461d      	movcc	r5, r3
 8007054:	0553      	lsls	r3, r2, #21
 8007056:	d530      	bpl.n	80070ba <__ssputs_r+0x9e>
 8007058:	4629      	mov	r1, r5
 800705a:	f7ff ff53 	bl	8006f04 <_malloc_r>
 800705e:	4606      	mov	r6, r0
 8007060:	b950      	cbnz	r0, 8007078 <__ssputs_r+0x5c>
 8007062:	230c      	movs	r3, #12
 8007064:	f8ca 3000 	str.w	r3, [sl]
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	f04f 30ff 	mov.w	r0, #4294967295
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	463a      	mov	r2, r7
 800707a:	6921      	ldr	r1, [r4, #16]
 800707c:	f000 faa8 	bl	80075d0 <memcpy>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	6126      	str	r6, [r4, #16]
 800708e:	6165      	str	r5, [r4, #20]
 8007090:	443e      	add	r6, r7
 8007092:	1bed      	subs	r5, r5, r7
 8007094:	6026      	str	r6, [r4, #0]
 8007096:	60a5      	str	r5, [r4, #8]
 8007098:	464e      	mov	r6, r9
 800709a:	454e      	cmp	r6, r9
 800709c:	d900      	bls.n	80070a0 <__ssputs_r+0x84>
 800709e:	464e      	mov	r6, r9
 80070a0:	4632      	mov	r2, r6
 80070a2:	4641      	mov	r1, r8
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	f000 fa9e 	bl	80075e6 <memmove>
 80070aa:	68a3      	ldr	r3, [r4, #8]
 80070ac:	1b9b      	subs	r3, r3, r6
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	441e      	add	r6, r3
 80070b4:	6026      	str	r6, [r4, #0]
 80070b6:	2000      	movs	r0, #0
 80070b8:	e7dc      	b.n	8007074 <__ssputs_r+0x58>
 80070ba:	462a      	mov	r2, r5
 80070bc:	f000 faac 	bl	8007618 <_realloc_r>
 80070c0:	4606      	mov	r6, r0
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d1e2      	bne.n	800708c <__ssputs_r+0x70>
 80070c6:	6921      	ldr	r1, [r4, #16]
 80070c8:	4650      	mov	r0, sl
 80070ca:	f7ff fecd 	bl	8006e68 <_free_r>
 80070ce:	e7c8      	b.n	8007062 <__ssputs_r+0x46>

080070d0 <_svfiprintf_r>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	461d      	mov	r5, r3
 80070d6:	898b      	ldrh	r3, [r1, #12]
 80070d8:	061f      	lsls	r7, r3, #24
 80070da:	b09d      	sub	sp, #116	; 0x74
 80070dc:	4680      	mov	r8, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	4616      	mov	r6, r2
 80070e2:	d50f      	bpl.n	8007104 <_svfiprintf_r+0x34>
 80070e4:	690b      	ldr	r3, [r1, #16]
 80070e6:	b96b      	cbnz	r3, 8007104 <_svfiprintf_r+0x34>
 80070e8:	2140      	movs	r1, #64	; 0x40
 80070ea:	f7ff ff0b 	bl	8006f04 <_malloc_r>
 80070ee:	6020      	str	r0, [r4, #0]
 80070f0:	6120      	str	r0, [r4, #16]
 80070f2:	b928      	cbnz	r0, 8007100 <_svfiprintf_r+0x30>
 80070f4:	230c      	movs	r3, #12
 80070f6:	f8c8 3000 	str.w	r3, [r8]
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	e0c8      	b.n	8007292 <_svfiprintf_r+0x1c2>
 8007100:	2340      	movs	r3, #64	; 0x40
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	2300      	movs	r3, #0
 8007106:	9309      	str	r3, [sp, #36]	; 0x24
 8007108:	2320      	movs	r3, #32
 800710a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800710e:	2330      	movs	r3, #48	; 0x30
 8007110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007114:	9503      	str	r5, [sp, #12]
 8007116:	f04f 0b01 	mov.w	fp, #1
 800711a:	4637      	mov	r7, r6
 800711c:	463d      	mov	r5, r7
 800711e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007122:	b10b      	cbz	r3, 8007128 <_svfiprintf_r+0x58>
 8007124:	2b25      	cmp	r3, #37	; 0x25
 8007126:	d13e      	bne.n	80071a6 <_svfiprintf_r+0xd6>
 8007128:	ebb7 0a06 	subs.w	sl, r7, r6
 800712c:	d00b      	beq.n	8007146 <_svfiprintf_r+0x76>
 800712e:	4653      	mov	r3, sl
 8007130:	4632      	mov	r2, r6
 8007132:	4621      	mov	r1, r4
 8007134:	4640      	mov	r0, r8
 8007136:	f7ff ff71 	bl	800701c <__ssputs_r>
 800713a:	3001      	adds	r0, #1
 800713c:	f000 80a4 	beq.w	8007288 <_svfiprintf_r+0x1b8>
 8007140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007142:	4453      	add	r3, sl
 8007144:	9309      	str	r3, [sp, #36]	; 0x24
 8007146:	783b      	ldrb	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 809d 	beq.w	8007288 <_svfiprintf_r+0x1b8>
 800714e:	2300      	movs	r3, #0
 8007150:	f04f 32ff 	mov.w	r2, #4294967295
 8007154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007158:	9304      	str	r3, [sp, #16]
 800715a:	9307      	str	r3, [sp, #28]
 800715c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007160:	931a      	str	r3, [sp, #104]	; 0x68
 8007162:	462f      	mov	r7, r5
 8007164:	2205      	movs	r2, #5
 8007166:	f817 1b01 	ldrb.w	r1, [r7], #1
 800716a:	4850      	ldr	r0, [pc, #320]	; (80072ac <_svfiprintf_r+0x1dc>)
 800716c:	f7f9 f838 	bl	80001e0 <memchr>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	b9d0      	cbnz	r0, 80071aa <_svfiprintf_r+0xda>
 8007174:	06d9      	lsls	r1, r3, #27
 8007176:	bf44      	itt	mi
 8007178:	2220      	movmi	r2, #32
 800717a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800717e:	071a      	lsls	r2, r3, #28
 8007180:	bf44      	itt	mi
 8007182:	222b      	movmi	r2, #43	; 0x2b
 8007184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007188:	782a      	ldrb	r2, [r5, #0]
 800718a:	2a2a      	cmp	r2, #42	; 0x2a
 800718c:	d015      	beq.n	80071ba <_svfiprintf_r+0xea>
 800718e:	9a07      	ldr	r2, [sp, #28]
 8007190:	462f      	mov	r7, r5
 8007192:	2000      	movs	r0, #0
 8007194:	250a      	movs	r5, #10
 8007196:	4639      	mov	r1, r7
 8007198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719c:	3b30      	subs	r3, #48	; 0x30
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d94d      	bls.n	800723e <_svfiprintf_r+0x16e>
 80071a2:	b1b8      	cbz	r0, 80071d4 <_svfiprintf_r+0x104>
 80071a4:	e00f      	b.n	80071c6 <_svfiprintf_r+0xf6>
 80071a6:	462f      	mov	r7, r5
 80071a8:	e7b8      	b.n	800711c <_svfiprintf_r+0x4c>
 80071aa:	4a40      	ldr	r2, [pc, #256]	; (80072ac <_svfiprintf_r+0x1dc>)
 80071ac:	1a80      	subs	r0, r0, r2
 80071ae:	fa0b f000 	lsl.w	r0, fp, r0
 80071b2:	4318      	orrs	r0, r3
 80071b4:	9004      	str	r0, [sp, #16]
 80071b6:	463d      	mov	r5, r7
 80071b8:	e7d3      	b.n	8007162 <_svfiprintf_r+0x92>
 80071ba:	9a03      	ldr	r2, [sp, #12]
 80071bc:	1d11      	adds	r1, r2, #4
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	9103      	str	r1, [sp, #12]
 80071c2:	2a00      	cmp	r2, #0
 80071c4:	db01      	blt.n	80071ca <_svfiprintf_r+0xfa>
 80071c6:	9207      	str	r2, [sp, #28]
 80071c8:	e004      	b.n	80071d4 <_svfiprintf_r+0x104>
 80071ca:	4252      	negs	r2, r2
 80071cc:	f043 0302 	orr.w	r3, r3, #2
 80071d0:	9207      	str	r2, [sp, #28]
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	783b      	ldrb	r3, [r7, #0]
 80071d6:	2b2e      	cmp	r3, #46	; 0x2e
 80071d8:	d10c      	bne.n	80071f4 <_svfiprintf_r+0x124>
 80071da:	787b      	ldrb	r3, [r7, #1]
 80071dc:	2b2a      	cmp	r3, #42	; 0x2a
 80071de:	d133      	bne.n	8007248 <_svfiprintf_r+0x178>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	9203      	str	r2, [sp, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfb8      	it	lt
 80071ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80071f0:	3702      	adds	r7, #2
 80071f2:	9305      	str	r3, [sp, #20]
 80071f4:	4d2e      	ldr	r5, [pc, #184]	; (80072b0 <_svfiprintf_r+0x1e0>)
 80071f6:	7839      	ldrb	r1, [r7, #0]
 80071f8:	2203      	movs	r2, #3
 80071fa:	4628      	mov	r0, r5
 80071fc:	f7f8 fff0 	bl	80001e0 <memchr>
 8007200:	b138      	cbz	r0, 8007212 <_svfiprintf_r+0x142>
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	1b40      	subs	r0, r0, r5
 8007206:	fa03 f000 	lsl.w	r0, r3, r0
 800720a:	9b04      	ldr	r3, [sp, #16]
 800720c:	4303      	orrs	r3, r0
 800720e:	3701      	adds	r7, #1
 8007210:	9304      	str	r3, [sp, #16]
 8007212:	7839      	ldrb	r1, [r7, #0]
 8007214:	4827      	ldr	r0, [pc, #156]	; (80072b4 <_svfiprintf_r+0x1e4>)
 8007216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800721a:	2206      	movs	r2, #6
 800721c:	1c7e      	adds	r6, r7, #1
 800721e:	f7f8 ffdf 	bl	80001e0 <memchr>
 8007222:	2800      	cmp	r0, #0
 8007224:	d038      	beq.n	8007298 <_svfiprintf_r+0x1c8>
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <_svfiprintf_r+0x1e8>)
 8007228:	bb13      	cbnz	r3, 8007270 <_svfiprintf_r+0x1a0>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	3307      	adds	r3, #7
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	3308      	adds	r3, #8
 8007234:	9303      	str	r3, [sp, #12]
 8007236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007238:	444b      	add	r3, r9
 800723a:	9309      	str	r3, [sp, #36]	; 0x24
 800723c:	e76d      	b.n	800711a <_svfiprintf_r+0x4a>
 800723e:	fb05 3202 	mla	r2, r5, r2, r3
 8007242:	2001      	movs	r0, #1
 8007244:	460f      	mov	r7, r1
 8007246:	e7a6      	b.n	8007196 <_svfiprintf_r+0xc6>
 8007248:	2300      	movs	r3, #0
 800724a:	3701      	adds	r7, #1
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	4619      	mov	r1, r3
 8007250:	250a      	movs	r5, #10
 8007252:	4638      	mov	r0, r7
 8007254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007258:	3a30      	subs	r2, #48	; 0x30
 800725a:	2a09      	cmp	r2, #9
 800725c:	d903      	bls.n	8007266 <_svfiprintf_r+0x196>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0c8      	beq.n	80071f4 <_svfiprintf_r+0x124>
 8007262:	9105      	str	r1, [sp, #20]
 8007264:	e7c6      	b.n	80071f4 <_svfiprintf_r+0x124>
 8007266:	fb05 2101 	mla	r1, r5, r1, r2
 800726a:	2301      	movs	r3, #1
 800726c:	4607      	mov	r7, r0
 800726e:	e7f0      	b.n	8007252 <_svfiprintf_r+0x182>
 8007270:	ab03      	add	r3, sp, #12
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4622      	mov	r2, r4
 8007276:	4b11      	ldr	r3, [pc, #68]	; (80072bc <_svfiprintf_r+0x1ec>)
 8007278:	a904      	add	r1, sp, #16
 800727a:	4640      	mov	r0, r8
 800727c:	f3af 8000 	nop.w
 8007280:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007284:	4681      	mov	r9, r0
 8007286:	d1d6      	bne.n	8007236 <_svfiprintf_r+0x166>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	065b      	lsls	r3, r3, #25
 800728c:	f53f af35 	bmi.w	80070fa <_svfiprintf_r+0x2a>
 8007290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007292:	b01d      	add	sp, #116	; 0x74
 8007294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007298:	ab03      	add	r3, sp, #12
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4622      	mov	r2, r4
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <_svfiprintf_r+0x1ec>)
 80072a0:	a904      	add	r1, sp, #16
 80072a2:	4640      	mov	r0, r8
 80072a4:	f000 f882 	bl	80073ac <_printf_i>
 80072a8:	e7ea      	b.n	8007280 <_svfiprintf_r+0x1b0>
 80072aa:	bf00      	nop
 80072ac:	08007700 	.word	0x08007700
 80072b0:	08007706 	.word	0x08007706
 80072b4:	0800770a 	.word	0x0800770a
 80072b8:	00000000 	.word	0x00000000
 80072bc:	0800701d 	.word	0x0800701d

080072c0 <_printf_common>:
 80072c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	4691      	mov	r9, r2
 80072c6:	461f      	mov	r7, r3
 80072c8:	688a      	ldr	r2, [r1, #8]
 80072ca:	690b      	ldr	r3, [r1, #16]
 80072cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	bfb8      	it	lt
 80072d4:	4613      	movlt	r3, r2
 80072d6:	f8c9 3000 	str.w	r3, [r9]
 80072da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072de:	4606      	mov	r6, r0
 80072e0:	460c      	mov	r4, r1
 80072e2:	b112      	cbz	r2, 80072ea <_printf_common+0x2a>
 80072e4:	3301      	adds	r3, #1
 80072e6:	f8c9 3000 	str.w	r3, [r9]
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	0699      	lsls	r1, r3, #26
 80072ee:	bf42      	ittt	mi
 80072f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072f4:	3302      	addmi	r3, #2
 80072f6:	f8c9 3000 	strmi.w	r3, [r9]
 80072fa:	6825      	ldr	r5, [r4, #0]
 80072fc:	f015 0506 	ands.w	r5, r5, #6
 8007300:	d107      	bne.n	8007312 <_printf_common+0x52>
 8007302:	f104 0a19 	add.w	sl, r4, #25
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	f8d9 2000 	ldr.w	r2, [r9]
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	42ab      	cmp	r3, r5
 8007310:	dc28      	bgt.n	8007364 <_printf_common+0xa4>
 8007312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007316:	6822      	ldr	r2, [r4, #0]
 8007318:	3300      	adds	r3, #0
 800731a:	bf18      	it	ne
 800731c:	2301      	movne	r3, #1
 800731e:	0692      	lsls	r2, r2, #26
 8007320:	d42d      	bmi.n	800737e <_printf_common+0xbe>
 8007322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007326:	4639      	mov	r1, r7
 8007328:	4630      	mov	r0, r6
 800732a:	47c0      	blx	r8
 800732c:	3001      	adds	r0, #1
 800732e:	d020      	beq.n	8007372 <_printf_common+0xb2>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	68e5      	ldr	r5, [r4, #12]
 8007334:	f8d9 2000 	ldr.w	r2, [r9]
 8007338:	f003 0306 	and.w	r3, r3, #6
 800733c:	2b04      	cmp	r3, #4
 800733e:	bf08      	it	eq
 8007340:	1aad      	subeq	r5, r5, r2
 8007342:	68a3      	ldr	r3, [r4, #8]
 8007344:	6922      	ldr	r2, [r4, #16]
 8007346:	bf0c      	ite	eq
 8007348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800734c:	2500      	movne	r5, #0
 800734e:	4293      	cmp	r3, r2
 8007350:	bfc4      	itt	gt
 8007352:	1a9b      	subgt	r3, r3, r2
 8007354:	18ed      	addgt	r5, r5, r3
 8007356:	f04f 0900 	mov.w	r9, #0
 800735a:	341a      	adds	r4, #26
 800735c:	454d      	cmp	r5, r9
 800735e:	d11a      	bne.n	8007396 <_printf_common+0xd6>
 8007360:	2000      	movs	r0, #0
 8007362:	e008      	b.n	8007376 <_printf_common+0xb6>
 8007364:	2301      	movs	r3, #1
 8007366:	4652      	mov	r2, sl
 8007368:	4639      	mov	r1, r7
 800736a:	4630      	mov	r0, r6
 800736c:	47c0      	blx	r8
 800736e:	3001      	adds	r0, #1
 8007370:	d103      	bne.n	800737a <_printf_common+0xba>
 8007372:	f04f 30ff 	mov.w	r0, #4294967295
 8007376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737a:	3501      	adds	r5, #1
 800737c:	e7c3      	b.n	8007306 <_printf_common+0x46>
 800737e:	18e1      	adds	r1, r4, r3
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	2030      	movs	r0, #48	; 0x30
 8007384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007388:	4422      	add	r2, r4
 800738a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800738e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007392:	3302      	adds	r3, #2
 8007394:	e7c5      	b.n	8007322 <_printf_common+0x62>
 8007396:	2301      	movs	r3, #1
 8007398:	4622      	mov	r2, r4
 800739a:	4639      	mov	r1, r7
 800739c:	4630      	mov	r0, r6
 800739e:	47c0      	blx	r8
 80073a0:	3001      	adds	r0, #1
 80073a2:	d0e6      	beq.n	8007372 <_printf_common+0xb2>
 80073a4:	f109 0901 	add.w	r9, r9, #1
 80073a8:	e7d8      	b.n	800735c <_printf_common+0x9c>
	...

080073ac <_printf_i>:
 80073ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073b4:	460c      	mov	r4, r1
 80073b6:	7e09      	ldrb	r1, [r1, #24]
 80073b8:	b085      	sub	sp, #20
 80073ba:	296e      	cmp	r1, #110	; 0x6e
 80073bc:	4617      	mov	r7, r2
 80073be:	4606      	mov	r6, r0
 80073c0:	4698      	mov	r8, r3
 80073c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c4:	f000 80b3 	beq.w	800752e <_printf_i+0x182>
 80073c8:	d822      	bhi.n	8007410 <_printf_i+0x64>
 80073ca:	2963      	cmp	r1, #99	; 0x63
 80073cc:	d036      	beq.n	800743c <_printf_i+0x90>
 80073ce:	d80a      	bhi.n	80073e6 <_printf_i+0x3a>
 80073d0:	2900      	cmp	r1, #0
 80073d2:	f000 80b9 	beq.w	8007548 <_printf_i+0x19c>
 80073d6:	2958      	cmp	r1, #88	; 0x58
 80073d8:	f000 8083 	beq.w	80074e2 <_printf_i+0x136>
 80073dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073e4:	e032      	b.n	800744c <_printf_i+0xa0>
 80073e6:	2964      	cmp	r1, #100	; 0x64
 80073e8:	d001      	beq.n	80073ee <_printf_i+0x42>
 80073ea:	2969      	cmp	r1, #105	; 0x69
 80073ec:	d1f6      	bne.n	80073dc <_printf_i+0x30>
 80073ee:	6820      	ldr	r0, [r4, #0]
 80073f0:	6813      	ldr	r3, [r2, #0]
 80073f2:	0605      	lsls	r5, r0, #24
 80073f4:	f103 0104 	add.w	r1, r3, #4
 80073f8:	d52a      	bpl.n	8007450 <_printf_i+0xa4>
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6011      	str	r1, [r2, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da03      	bge.n	800740a <_printf_i+0x5e>
 8007402:	222d      	movs	r2, #45	; 0x2d
 8007404:	425b      	negs	r3, r3
 8007406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800740a:	486f      	ldr	r0, [pc, #444]	; (80075c8 <_printf_i+0x21c>)
 800740c:	220a      	movs	r2, #10
 800740e:	e039      	b.n	8007484 <_printf_i+0xd8>
 8007410:	2973      	cmp	r1, #115	; 0x73
 8007412:	f000 809d 	beq.w	8007550 <_printf_i+0x1a4>
 8007416:	d808      	bhi.n	800742a <_printf_i+0x7e>
 8007418:	296f      	cmp	r1, #111	; 0x6f
 800741a:	d020      	beq.n	800745e <_printf_i+0xb2>
 800741c:	2970      	cmp	r1, #112	; 0x70
 800741e:	d1dd      	bne.n	80073dc <_printf_i+0x30>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	f043 0320 	orr.w	r3, r3, #32
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	e003      	b.n	8007432 <_printf_i+0x86>
 800742a:	2975      	cmp	r1, #117	; 0x75
 800742c:	d017      	beq.n	800745e <_printf_i+0xb2>
 800742e:	2978      	cmp	r1, #120	; 0x78
 8007430:	d1d4      	bne.n	80073dc <_printf_i+0x30>
 8007432:	2378      	movs	r3, #120	; 0x78
 8007434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007438:	4864      	ldr	r0, [pc, #400]	; (80075cc <_printf_i+0x220>)
 800743a:	e055      	b.n	80074e8 <_printf_i+0x13c>
 800743c:	6813      	ldr	r3, [r2, #0]
 800743e:	1d19      	adds	r1, r3, #4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6011      	str	r1, [r2, #0]
 8007444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800744c:	2301      	movs	r3, #1
 800744e:	e08c      	b.n	800756a <_printf_i+0x1be>
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6011      	str	r1, [r2, #0]
 8007454:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007458:	bf18      	it	ne
 800745a:	b21b      	sxthne	r3, r3
 800745c:	e7cf      	b.n	80073fe <_printf_i+0x52>
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	6825      	ldr	r5, [r4, #0]
 8007462:	1d18      	adds	r0, r3, #4
 8007464:	6010      	str	r0, [r2, #0]
 8007466:	0628      	lsls	r0, r5, #24
 8007468:	d501      	bpl.n	800746e <_printf_i+0xc2>
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	e002      	b.n	8007474 <_printf_i+0xc8>
 800746e:	0668      	lsls	r0, r5, #25
 8007470:	d5fb      	bpl.n	800746a <_printf_i+0xbe>
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	4854      	ldr	r0, [pc, #336]	; (80075c8 <_printf_i+0x21c>)
 8007476:	296f      	cmp	r1, #111	; 0x6f
 8007478:	bf14      	ite	ne
 800747a:	220a      	movne	r2, #10
 800747c:	2208      	moveq	r2, #8
 800747e:	2100      	movs	r1, #0
 8007480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007484:	6865      	ldr	r5, [r4, #4]
 8007486:	60a5      	str	r5, [r4, #8]
 8007488:	2d00      	cmp	r5, #0
 800748a:	f2c0 8095 	blt.w	80075b8 <_printf_i+0x20c>
 800748e:	6821      	ldr	r1, [r4, #0]
 8007490:	f021 0104 	bic.w	r1, r1, #4
 8007494:	6021      	str	r1, [r4, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d13d      	bne.n	8007516 <_printf_i+0x16a>
 800749a:	2d00      	cmp	r5, #0
 800749c:	f040 808e 	bne.w	80075bc <_printf_i+0x210>
 80074a0:	4665      	mov	r5, ip
 80074a2:	2a08      	cmp	r2, #8
 80074a4:	d10b      	bne.n	80074be <_printf_i+0x112>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	07db      	lsls	r3, r3, #31
 80074aa:	d508      	bpl.n	80074be <_printf_i+0x112>
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	6862      	ldr	r2, [r4, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	bfde      	ittt	le
 80074b4:	2330      	movle	r3, #48	; 0x30
 80074b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074be:	ebac 0305 	sub.w	r3, ip, r5
 80074c2:	6123      	str	r3, [r4, #16]
 80074c4:	f8cd 8000 	str.w	r8, [sp]
 80074c8:	463b      	mov	r3, r7
 80074ca:	aa03      	add	r2, sp, #12
 80074cc:	4621      	mov	r1, r4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff fef6 	bl	80072c0 <_printf_common>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d14d      	bne.n	8007574 <_printf_i+0x1c8>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	b005      	add	sp, #20
 80074de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e2:	4839      	ldr	r0, [pc, #228]	; (80075c8 <_printf_i+0x21c>)
 80074e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074e8:	6813      	ldr	r3, [r2, #0]
 80074ea:	6821      	ldr	r1, [r4, #0]
 80074ec:	1d1d      	adds	r5, r3, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6015      	str	r5, [r2, #0]
 80074f2:	060a      	lsls	r2, r1, #24
 80074f4:	d50b      	bpl.n	800750e <_printf_i+0x162>
 80074f6:	07ca      	lsls	r2, r1, #31
 80074f8:	bf44      	itt	mi
 80074fa:	f041 0120 	orrmi.w	r1, r1, #32
 80074fe:	6021      	strmi	r1, [r4, #0]
 8007500:	b91b      	cbnz	r3, 800750a <_printf_i+0x15e>
 8007502:	6822      	ldr	r2, [r4, #0]
 8007504:	f022 0220 	bic.w	r2, r2, #32
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	2210      	movs	r2, #16
 800750c:	e7b7      	b.n	800747e <_printf_i+0xd2>
 800750e:	064d      	lsls	r5, r1, #25
 8007510:	bf48      	it	mi
 8007512:	b29b      	uxthmi	r3, r3
 8007514:	e7ef      	b.n	80074f6 <_printf_i+0x14a>
 8007516:	4665      	mov	r5, ip
 8007518:	fbb3 f1f2 	udiv	r1, r3, r2
 800751c:	fb02 3311 	mls	r3, r2, r1, r3
 8007520:	5cc3      	ldrb	r3, [r0, r3]
 8007522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007526:	460b      	mov	r3, r1
 8007528:	2900      	cmp	r1, #0
 800752a:	d1f5      	bne.n	8007518 <_printf_i+0x16c>
 800752c:	e7b9      	b.n	80074a2 <_printf_i+0xf6>
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	6825      	ldr	r5, [r4, #0]
 8007532:	6961      	ldr	r1, [r4, #20]
 8007534:	1d18      	adds	r0, r3, #4
 8007536:	6010      	str	r0, [r2, #0]
 8007538:	0628      	lsls	r0, r5, #24
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	d501      	bpl.n	8007542 <_printf_i+0x196>
 800753e:	6019      	str	r1, [r3, #0]
 8007540:	e002      	b.n	8007548 <_printf_i+0x19c>
 8007542:	066a      	lsls	r2, r5, #25
 8007544:	d5fb      	bpl.n	800753e <_printf_i+0x192>
 8007546:	8019      	strh	r1, [r3, #0]
 8007548:	2300      	movs	r3, #0
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	4665      	mov	r5, ip
 800754e:	e7b9      	b.n	80074c4 <_printf_i+0x118>
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	1d19      	adds	r1, r3, #4
 8007554:	6011      	str	r1, [r2, #0]
 8007556:	681d      	ldr	r5, [r3, #0]
 8007558:	6862      	ldr	r2, [r4, #4]
 800755a:	2100      	movs	r1, #0
 800755c:	4628      	mov	r0, r5
 800755e:	f7f8 fe3f 	bl	80001e0 <memchr>
 8007562:	b108      	cbz	r0, 8007568 <_printf_i+0x1bc>
 8007564:	1b40      	subs	r0, r0, r5
 8007566:	6060      	str	r0, [r4, #4]
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	2300      	movs	r3, #0
 800756e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007572:	e7a7      	b.n	80074c4 <_printf_i+0x118>
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	462a      	mov	r2, r5
 8007578:	4639      	mov	r1, r7
 800757a:	4630      	mov	r0, r6
 800757c:	47c0      	blx	r8
 800757e:	3001      	adds	r0, #1
 8007580:	d0aa      	beq.n	80074d8 <_printf_i+0x12c>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	079b      	lsls	r3, r3, #30
 8007586:	d413      	bmi.n	80075b0 <_printf_i+0x204>
 8007588:	68e0      	ldr	r0, [r4, #12]
 800758a:	9b03      	ldr	r3, [sp, #12]
 800758c:	4298      	cmp	r0, r3
 800758e:	bfb8      	it	lt
 8007590:	4618      	movlt	r0, r3
 8007592:	e7a3      	b.n	80074dc <_printf_i+0x130>
 8007594:	2301      	movs	r3, #1
 8007596:	464a      	mov	r2, r9
 8007598:	4639      	mov	r1, r7
 800759a:	4630      	mov	r0, r6
 800759c:	47c0      	blx	r8
 800759e:	3001      	adds	r0, #1
 80075a0:	d09a      	beq.n	80074d8 <_printf_i+0x12c>
 80075a2:	3501      	adds	r5, #1
 80075a4:	68e3      	ldr	r3, [r4, #12]
 80075a6:	9a03      	ldr	r2, [sp, #12]
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	42ab      	cmp	r3, r5
 80075ac:	dcf2      	bgt.n	8007594 <_printf_i+0x1e8>
 80075ae:	e7eb      	b.n	8007588 <_printf_i+0x1dc>
 80075b0:	2500      	movs	r5, #0
 80075b2:	f104 0919 	add.w	r9, r4, #25
 80075b6:	e7f5      	b.n	80075a4 <_printf_i+0x1f8>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1ac      	bne.n	8007516 <_printf_i+0x16a>
 80075bc:	7803      	ldrb	r3, [r0, #0]
 80075be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c6:	e76c      	b.n	80074a2 <_printf_i+0xf6>
 80075c8:	08007711 	.word	0x08007711
 80075cc:	08007722 	.word	0x08007722

080075d0 <memcpy>:
 80075d0:	b510      	push	{r4, lr}
 80075d2:	1e43      	subs	r3, r0, #1
 80075d4:	440a      	add	r2, r1
 80075d6:	4291      	cmp	r1, r2
 80075d8:	d100      	bne.n	80075dc <memcpy+0xc>
 80075da:	bd10      	pop	{r4, pc}
 80075dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e4:	e7f7      	b.n	80075d6 <memcpy+0x6>

080075e6 <memmove>:
 80075e6:	4288      	cmp	r0, r1
 80075e8:	b510      	push	{r4, lr}
 80075ea:	eb01 0302 	add.w	r3, r1, r2
 80075ee:	d807      	bhi.n	8007600 <memmove+0x1a>
 80075f0:	1e42      	subs	r2, r0, #1
 80075f2:	4299      	cmp	r1, r3
 80075f4:	d00a      	beq.n	800760c <memmove+0x26>
 80075f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80075fe:	e7f8      	b.n	80075f2 <memmove+0xc>
 8007600:	4283      	cmp	r3, r0
 8007602:	d9f5      	bls.n	80075f0 <memmove+0xa>
 8007604:	1881      	adds	r1, r0, r2
 8007606:	1ad2      	subs	r2, r2, r3
 8007608:	42d3      	cmn	r3, r2
 800760a:	d100      	bne.n	800760e <memmove+0x28>
 800760c:	bd10      	pop	{r4, pc}
 800760e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007612:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007616:	e7f7      	b.n	8007608 <memmove+0x22>

08007618 <_realloc_r>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	4607      	mov	r7, r0
 800761c:	4614      	mov	r4, r2
 800761e:	460e      	mov	r6, r1
 8007620:	b921      	cbnz	r1, 800762c <_realloc_r+0x14>
 8007622:	4611      	mov	r1, r2
 8007624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007628:	f7ff bc6c 	b.w	8006f04 <_malloc_r>
 800762c:	b922      	cbnz	r2, 8007638 <_realloc_r+0x20>
 800762e:	f7ff fc1b 	bl	8006e68 <_free_r>
 8007632:	4625      	mov	r5, r4
 8007634:	4628      	mov	r0, r5
 8007636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007638:	f000 f814 	bl	8007664 <_malloc_usable_size_r>
 800763c:	42a0      	cmp	r0, r4
 800763e:	d20f      	bcs.n	8007660 <_realloc_r+0x48>
 8007640:	4621      	mov	r1, r4
 8007642:	4638      	mov	r0, r7
 8007644:	f7ff fc5e 	bl	8006f04 <_malloc_r>
 8007648:	4605      	mov	r5, r0
 800764a:	2800      	cmp	r0, #0
 800764c:	d0f2      	beq.n	8007634 <_realloc_r+0x1c>
 800764e:	4631      	mov	r1, r6
 8007650:	4622      	mov	r2, r4
 8007652:	f7ff ffbd 	bl	80075d0 <memcpy>
 8007656:	4631      	mov	r1, r6
 8007658:	4638      	mov	r0, r7
 800765a:	f7ff fc05 	bl	8006e68 <_free_r>
 800765e:	e7e9      	b.n	8007634 <_realloc_r+0x1c>
 8007660:	4635      	mov	r5, r6
 8007662:	e7e7      	b.n	8007634 <_realloc_r+0x1c>

08007664 <_malloc_usable_size_r>:
 8007664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007668:	1f18      	subs	r0, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	bfbc      	itt	lt
 800766e:	580b      	ldrlt	r3, [r1, r0]
 8007670:	18c0      	addlt	r0, r0, r3
 8007672:	4770      	bx	lr

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
